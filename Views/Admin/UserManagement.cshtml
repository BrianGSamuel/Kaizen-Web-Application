@model IEnumerable<KaizenWebApp.Models.Users>
@{
    ViewData["Title"] = "User Management";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2 class="mb-0">User Management</h2>

</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="admin-card">
    @Html.AntiForgeryToken()
    <div class="admin-card-header">
        <h5 class="admin-card-title">
            <i class="fas fa-users me-2"></i>All Users
        </h5>
    </div>
    
    <div class="table-responsive">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Username</th>
                    <th>Department/Name</th>
                    <th>Plant</th>
                    <th>Role</th>
                    <th>Employee Name</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in Model)
                {
                    <tr data-user-id="@user.Id">
                        <td>@user.Id</td>
                        <td>@user.UserName</td>
                        <td>@user.DepartmentName</td>
                        <td>@user.Plant</td>
                        <td>
                            @{
                                var role = user.Role ?? "User";
                                var roleDisplay = role switch
                                {
                                    "Admin" => "Administrator",
                                    "KaizenTeam" => "Kaizen Team",
                                    _ => role
                                };
                            }
                            <span class="badge bg-primary">@roleDisplay</span>
                        </td>
                        <td>@(user.EmployeeName ?? "Not specified")</td>
                        <td>
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-sm btn-outline-primary" 
                                        onclick="viewUser(@user.Id)" title="View Details">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-warning" 
                                        onclick="editUser(@user.Id)" title="Edit User">
                                    <i class="fas fa-edit"></i>
                                </button>
                                @if (user.UserName?.ToLower() != "admin")
                                {
                                    <button type="button" class="btn btn-sm btn-outline-danger" 
                                            onclick="deleteUser(@user.Id, '@user.UserName')" title="Delete User">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- User Details Modal -->
<div class="modal fade" id="userModal" tabindex="-1" aria-labelledby="userModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="userModalLabel">User Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="userModalBody">
                <!-- User details will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>



<script>
    function viewUser(userId) {
        // Fetch user details directly without loading modal
        fetch(`/Admin/GetUserDetails/${userId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const user = data.user;
                    document.getElementById('userModalLabel').textContent = 'User Details';
                    document.getElementById('userModalBody').innerHTML = `
                        <div class="row">
                            <div class="col-12">
                                <div class="text-center mb-3">
                                    <i class="fas fa-user fa-3x text-primary"></i>
                                </div>
                                <table class="table table-borderless">
                                    <tr>
                                        <td><strong>ID:</strong></td>
                                        <td>${user.id}</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Username:</strong></td>
                                        <td>${user.username}</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Department/Name:</strong></td>
                                        <td>${user.departmentName || 'Not specified'}</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Plant:</strong></td>
                                        <td>${user.plant || 'Not specified'}</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Role:</strong></td>
                                        <td><span class="badge bg-primary">${user.role}</span></td>
                                    </tr>
                                    <tr>
                                        <td><strong>Employee Name:</strong></td>
                                        <td>${user.employeeName || 'Not specified'}</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Employee Number:</strong></td>
                                        <td>${user.employeeNumber || 'Not specified'}</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Employee Photo Path:</strong></td>
                                        <td>${user.employeePhotoPath || 'Not specified'}</td>
                                    </tr>
                                </table>
                            </div>
                        </div>
                    `;
                    new bootstrap.Modal(document.getElementById('userModal')).show();
                } else {
                    alert('Error: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while fetching user details.');
            });
    }

    function editUser(userId) {
        // Redirect to edit page
        window.location.href = `/Admin/EditUser/${userId}`;
    }

    function deleteUser(userId, username) {
        if (confirm(`Are you sure you want to delete user: ${username}?\n\nThis action cannot be undone.`)) {
            // Get the anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
            
            // Create form data with anti-forgery token
            const formData = new FormData();
            if (token) {
                formData.append('__RequestVerificationToken', token);
            }
            
            fetch(`/Admin/DeleteUser/${userId}`, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const contentType = response.headers.get('content-type');
                if (contentType && contentType.includes('application/json')) {
                    return response.json();
                } else {
                    throw new Error('Response is not JSON');
                }
            })
            .then(data => {
                if (data.success) {
                    // Show success toast message
                    showToast(data.message, 'success');
                    
                    // Remove the row from the table
                    const row = document.querySelector(`tr[data-user-id="${userId}"]`);
                    if (row) {
                        row.remove();
                    } else {
                        location.reload();
                    }
                } else {
                    // Show error toast message
                    showToast(`Error: ${data.message}`, 'error');
                }
            })
            .catch(error => {
                console.error('Delete error:', error);
                
                // Show error toast message
                showToast(`An error occurred while deleting the user: ${error.message}`, 'error');
            });
        }
    }


</script> 