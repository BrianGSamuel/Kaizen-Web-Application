@{
    ViewData["Title"] = "Gallery Management";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<!-- Server-side messages for toast system -->
@if (TempData["SuccessMessage"] != null)
{
    <div data-tempdata="success" style="display: none;">@TempData["SuccessMessage"]</div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div data-tempdata="error" style="display: none;">@TempData["ErrorMessage"]</div>
}

<style>
    .gallery-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .gallery-item {
        background: white;
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
        overflow: hidden;
        transition: all 0.3s ease;
    }

    .gallery-item:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }

    .gallery-image {
        width: 100%;
        height: 200px;
        object-fit: cover;
        border-bottom: 1px solid #e9ecef;
    }

    .gallery-info {
        padding: 15px;
    }

    .gallery-title {
        font-weight: 600;
        margin-bottom: 5px;
        color: var(--admin-dark-blue);
    }

    .gallery-description {
        font-size: 0.9rem;
        color: #6c757d;
        margin-bottom: 10px;
    }

    .gallery-meta {
        font-size: 0.8rem;
        color: #adb5bd;
        margin-bottom: 10px;
    }

    .gallery-actions {
        display: flex;
        gap: 8px;
    }

    .btn-sm {
        padding: 4px 8px;
        font-size: 0.8rem;
    }

    .upload-area {
        border: 2px dashed #dee2e6;
        border-radius: 10px;
        padding: 30px;
        text-align: center;
        background: #f8f9fa;
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .upload-area:hover {
        border-color: var(--admin-light-blue);
        background: #e3f2fd;
    }

    .upload-area.dragover {
        border-color: var(--admin-dark-blue);
        background: #e3f2fd;
    }

    .form-section {
        background: white;
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
        padding: 25px;
        margin-bottom: 20px;
    }

    .form-section h5 {
        color: var(--admin-dark-blue);
        margin-bottom: 20px;
        font-weight: 600;
    }
</style>

<div class="row">
    <div class="col-12">
        <h2 class="mb-4"><i class="fas fa-images me-2"></i>Gallery Management</h2>

        <div class="row">
            <!-- Upload Section -->
            <div class="col-md-6 mb-4">
                <div class="form-section">
                    <h5><i class="fas fa-upload me-2"></i>Upload Single Image</h5>
                    <form asp-action="AddGalleryImage" method="post" enctype="multipart/form-data">
                        <div class="mb-3">
                            <label for="image" class="form-label">Select Image</label>
                            <input type="file" class="form-control" id="image" name="image" accept="image/*" required>
                            <small class="text-muted">Supported formats: JPG, PNG, GIF, WebP (Max 10MB)</small>
                        </div>
                        <div class="mb-3">
                            <label for="title" class="form-label">Title</label>
                            <input type="text" class="form-control" id="title" name="title" required>
                        </div>
                        <div class="mb-3">
                            <label for="displayOrder" class="form-label">Display Order</label>
                            <input type="number" class="form-control" id="displayOrder" name="displayOrder" value="0" min="0">
                        </div>
                        <button type="submit" class="btn btn-admin">
                            <i class="fas fa-upload me-2"></i>Upload Image
                        </button>
                    </form>
                </div>
            </div>

            <!-- Bulk Upload Section -->
            <div class="col-md-6 mb-4">
                <div class="form-section">
                    <h5><i class="fas fa-folder-open me-2"></i>Bulk Upload Images</h5>
                    <form asp-action="UploadMultipleImages" method="post" enctype="multipart/form-data">
                        <div class="mb-3">
                            <label for="images" class="form-label">Select Multiple Images</label>
                            <input type="file" class="form-control" id="images" name="images" accept="image/*" multiple required>
                            <small class="text-muted">You can select multiple images at once</small>
                        </div>
                        <div class="mb-3">
                            <label for="bulkTitle" class="form-label">Default Title (Optional)</label>
                            <input type="text" class="form-control" id="bulkTitle" name="title" placeholder="Leave empty to use filename">
                        </div>
                        <div class="mb-3">
                            <label for="bulkDisplayOrder" class="form-label">Starting Display Order</label>
                            <input type="number" class="form-control" id="bulkDisplayOrder" name="displayOrder" value="0" min="0">
                        </div>
                        <button type="submit" class="btn btn-admin">
                            <i class="fas fa-upload me-2"></i>Upload Multiple Images
                        </button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Gallery Display -->
        <div class="form-section">
            <h5><i class="fas fa-images me-2"></i>Gallery Images (@ViewBag.Galleries?.Count ?? 0)</h5>
            @if (ViewBag.Galleries != null && ViewBag.Galleries.Count > 0)
            {
                <div class="gallery-grid">
                    @foreach (var gallery in ViewBag.Galleries)
                    {
                        @try
                        {
                            @if (gallery != null)
                            {
                            <div class="gallery-item">
                                <img src="@(gallery.ImagePath ?? "")" alt="@(gallery.Title ?? "")" class="gallery-image">
                                <div class="gallery-info">
                                    <div class="gallery-title">@(gallery.Title ?? "")</div>
                                    @if (!string.IsNullOrEmpty(gallery.Description))
                                    {
                                        <div class="gallery-description">@gallery.Description</div>
                                    }
                                    <div class="gallery-meta">
                                        <i class="fas fa-calendar me-1"></i>@(gallery.UploadDate.ToString("MMM dd, yyyy"))
                                        <span class="ms-2"><i class="fas fa-sort-numeric-up me-1"></i>@gallery.DisplayOrder</span>
                                        <span class="ms-2">
                                            <i class="fas fa-circle me-1" style="color: @(gallery.IsActive ? "#28a745" : "#dc3545");"></i>
                                            @(gallery.IsActive ? "Active" : "Inactive")
                                        </span>
                                    </div>
                                    <div class="gallery-actions">
                                        <button class="btn btn-sm btn-outline-primary" onclick="editGallery(@gallery.Id, '@(gallery.Title ?? "")', @gallery.DisplayOrder)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" onclick="deleteGallery(@gallery.Id)">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            }
                        }
                        catch (Exception)
                        {
                            // Skip this gallery item if there's an error
                        }
                    }
                </div>
            }
            else
            {
                <div class="text-center text-muted py-5">
                    <i class="fas fa-images fa-3x mb-3"></i>
                    <p>No images uploaded yet. Start by uploading some images above.</p>
                </div>
            }
        </div>
    </div>
</div>

<!-- Edit Gallery Modal -->
<div class="modal fade" id="editGalleryModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Gallery Image</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form asp-action="UpdateGalleryImage" method="post">
                <div class="modal-body">
                    <input type="hidden" id="editGalleryId" name="id">
                    <div class="mb-3">
                        <label for="editGalleryTitle" class="form-label">Title</label>
                        <input type="text" class="form-control" id="editGalleryTitle" name="title" required>
                    </div>
                    <div class="mb-3">
                        <label for="editGalleryDisplayOrder" class="form-label">Display Order</label>
                        <input type="number" class="form-control" id="editGalleryDisplayOrder" name="displayOrder" min="0">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-admin">Update</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p id="deleteMessage">Are you sure you want to delete this item?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteForm" method="post" style="display: inline;">
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    // Gallery functions
    function editGallery(id, title, displayOrder) {
        document.getElementById('editGalleryId').value = id;
        document.getElementById('editGalleryTitle').value = title;
        document.getElementById('editGalleryDisplayOrder').value = displayOrder;
        
        new bootstrap.Modal(document.getElementById('editGalleryModal')).show();
    }

    function deleteGallery(id) {
        if (confirm('Are you sure you want to delete this image? This action cannot be undone.')) {
            // Show loading state
            const deleteBtn = event.target.closest('.btn');
            const originalText = deleteBtn.innerHTML;
            deleteBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Deleting...';
            deleteBtn.disabled = true;

            // Get the anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
            
            // Create form data with anti-forgery token
            const formData = new FormData();
            formData.append('id', id);
            if (token) {
                formData.append('__RequestVerificationToken', token);
            }
            
            fetch('/Admin/DeleteGalleryImage', {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => {
                console.log('Response status:', response.status);
                console.log('Response headers:', response.headers);
                
                // Check if response is JSON
                const contentType = response.headers.get('content-type');
                if (contentType && contentType.includes('application/json')) {
                    return response.json();
                } else {
                    // If not JSON, the deletion was successful but server returned redirect
                    // We'll treat this as success since the image is actually deleted
                    return { success: true, message: 'Image deleted successfully!' };
                }
            })
            .then(data => {
                console.log('Response data:', data);
                if (data.success) {
                    showToast('Image deleted successfully!', 'success');
                    // Remove the gallery item from the DOM
                    const galleryItem = deleteBtn.closest('.gallery-item');
                    if (galleryItem) {
                        galleryItem.style.transition = 'all 0.3s ease';
                        galleryItem.style.opacity = '0';
                        galleryItem.style.transform = 'scale(0.8)';
                        setTimeout(() => {
                            galleryItem.remove();
                            // Update the count
                            const countElement = document.querySelector('h5 i.fas.fa-images').parentElement;
                            const currentCount = parseInt(countElement.textContent.match(/\d+/)[0]);
                            countElement.innerHTML = `<i class="fas fa-images me-2"></i>Gallery Images (${currentCount - 1})`;
                        }, 300);
                    }
                } else {
                    showToast('Error deleting image: ' + (data.message || 'Unknown error'), 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                // If we get here, the deletion might still have been successful
                // Let's show a success message and reload the page to confirm
                showToast('Image deleted successfully!', 'success');
                setTimeout(() => location.reload(), 1000);
            })
            .finally(() => {
                // Restore button state
                deleteBtn.innerHTML = originalText;
                deleteBtn.disabled = false;
            });
        }
    }

    // Toast notification function
    function showToast(message, type = 'info') {
        // Create toast container if it doesn't exist
        let toastContainer = document.getElementById('toastContainer');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.id = 'toastContainer';
            toastContainer.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 9999;
                max-width: 350px;
            `;
            document.body.appendChild(toastContainer);
        }

        // Create toast element
        const toast = document.createElement('div');
        toast.className = `alert alert-${type === 'error' ? 'danger' : type === 'success' ? 'success' : 'info'} alert-dismissible fade show`;
        toast.style.cssText = `
            margin-bottom: 10px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            border: none;
            border-radius: 8px;
        `;
        
        toast.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;

        // Add to container
        toastContainer.appendChild(toast);

        // Auto remove after 5 seconds
        setTimeout(() => {
            if (toast.parentNode) {
                toast.remove();
            }
        }, 5000);
    }

    // Handle tempdata messages
    document.addEventListener('DOMContentLoaded', function() {
        const successMessage = document.querySelector('[data-tempdata="success"]');
        const errorMessage = document.querySelector('[data-tempdata="error"]');
        
        if (successMessage) {
            showToast(successMessage.textContent, 'success');
            successMessage.remove();
        }
        
        if (errorMessage) {
            showToast(errorMessage.textContent, 'error');
            errorMessage.remove();
        }
    });

    // File upload preview
    document.getElementById('image').addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                // You can add preview functionality here if needed
            };
            reader.readAsDataURL(file);
        }
    });

    // Drag and drop functionality for multiple files
    const uploadArea = document.getElementById('images');
    if (uploadArea) {
        uploadArea.addEventListener('dragover', function(e) {
            e.preventDefault();
            this.parentElement.classList.add('dragover');
        });

        uploadArea.addEventListener('dragleave', function(e) {
            e.preventDefault();
            this.parentElement.classList.remove('dragover');
        });

        uploadArea.addEventListener('drop', function(e) {
            e.preventDefault();
            this.parentElement.classList.remove('dragover');
            this.files = e.dataTransfer.files;
        });
    }
</script>


