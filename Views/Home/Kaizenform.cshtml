@model KaizenWebApp.Models.KaizenFormViewModel
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = "Kaizen Suggestion Form";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .form-control[readonly] {
        background-color: #f8f9fa;
        border-color: #dee2e6;
        color: #495057;
        cursor: not-allowed;
    }

    .form-control[readonly]:focus {
        background-color: #f8f9fa;
        border-color: #dee2e6;
        box-shadow: none;
    }

    .cost-saving-section {
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
        background-color: #f8f9fa;
    }

    .radio-group {
        display: flex;
        gap: 20px;
        margin-bottom: 15px;
    }

    .radio-item {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .radio-item input[type="radio"] {
        margin: 0;
    }

    .conditional-field {
        display: none;
        margin-top: 15px;
        padding: 15px;
        background-color: white;
        border-radius: 6px;
        border: 1px solid #ced4da;
    }

    .conditional-field.show {
        display: block;
    }

    .step-wizard {
        margin-bottom: 30px;
    }

    .step-indicator {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        position: relative;
        gap: 20px;
        padding: 0 40px;
    }

    .step-indicator::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 0;
        right: 0;
        height: 2px;
        background-color: #e9ecef;
        z-index: 1;
    }

    .step-item {
        position: relative;
        z-index: 2;
        background-color: white;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        border: 3px solid #e9ecef;
        transition: all 0.3s ease;
        font-weight: bold;
        color: #6c757d;
    }

    .step-item.active {
        border-color: #007bff;
        background-color: #007bff;
        color: white;
        transform: scale(1.1);
    }

    .step-item.completed {
        border-color: #28a745;
        background-color: #28a745;
        color: white;
    }

    .step-label {
        position: absolute;
        top: 60px;
        left: 50%;
        transform: translateX(-50%);
        white-space: normal;
        text-align: center;
        font-size: 0.875rem;
        font-weight: 500;
        color: #6c757d;
        max-width: 120px;
        line-height: 1.2;
    }

    .step-item.active .step-label {
        color: #007bff;
        font-weight: 600;
    }

    .step-item.completed .step-label {
        color: #28a745;
        font-weight: 600;
    }

    .step-content {
        display: none;
        animation: fadeIn 0.5s ease-in-out;
        opacity: 0;
        transform: translateY(20px);
        min-height: 200px;
    }

    .step-content.active {
        display: block !important;
        opacity: 1;
        transform: translateY(0);
        visibility: visible !important;
        position: relative;
        width: 100%;
        margin-bottom: 20px;
    }

    /* Specific styling for step 4 to ensure it's properly contained */
    #step4 {
        position: relative;
        width: 100%;
        display: none;
    }

    #step4.active {
        display: block !important;
        position: relative;
        width: 100%;
        opacity: 1;
        visibility: visible !important;
    }

    /* Ensure all steps are properly contained within the form */
    .step-content {
        display: none;
        animation: fadeIn 0.5s ease-in-out;
        opacity: 0;
        transform: translateY(20px);
        min-height: 200px;
        position: relative;
        width: 100%;
    }

    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .step-navigation {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 30px;
        padding-top: 20px;
        border-top: 1px solid #e9ecef;
        position: relative;
        width: 100%;
        clear: both;
    }

    /* Ensure navigation buttons are properly contained */
    .step-navigation button {
        position: relative;
        z-index: 10;
    }

    /* Ensure form container properly contains all content */
    #kaizenForm {
        position: relative;
        width: 100%;
        overflow: visible;
        min-height: 400px;
    }

    /* Ensure step content doesn't overflow and is properly contained */
    .step-content {
        overflow: visible;
        margin-bottom: 20px;
        position: relative;
        width: 100%;
        display: none;
    }

    /* Ensure the card container properly contains the form */
    .card {
        overflow: visible;
        position: relative;
    }

    /* Ensure the container properly contains all content */
    .container {
        overflow: visible;
    }

    .btn-nav {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 12px 24px;
        border-radius: 8px;
        font-weight: 500;
        transition: all 0.3s ease;
        min-width: 120px;
        justify-content: center;
    }

    .btn-nav:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .btn-prev {
        background-color: #6c757d;
        border-color: #6c757d;
        color: white;
    }

    .btn-prev:hover {
        background-color: #5a6268;
        border-color: #545b62;
        color: white;
    }

    .btn-next {
        background-color: #007bff;
        border-color: #007bff;
        color: white;
    }

    .btn-next:hover {
        background-color: #0056b3;
        border-color: #0056b3;
        color: white;
    }

    .btn-submit {
        background-color: #28a745;
        border-color: #28a745;
        color: white;
    }

    .btn-submit:hover {
        background-color: #218838;
        border-color: #1e7e34;
        color: white;
    }

    .step-validation-error {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
        padding: 12px;
        border-radius: 6px;
        margin-bottom: 20px;
        display: none;
    }

    .step-validation-error.show {
        display: block;
        animation: shake 0.5s ease-in-out;
    }

    @@keyframes shake {
        0%, 100% { transform: translateX(0); }
        25% { transform: translateX(-5px); }
        75% { transform: translateX(5px); }
    }

    .step-header {
        text-align: center;
        margin-bottom: 30px;
        padding: 20px;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 10px;
        border-left: 4px solid #007bff;
    }

    .step-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: #495057;
        margin-bottom: 8px;
    }

    .step-description {
        color: #6c757d;
        font-size: 1rem;
    }

    .progress-bar {
        height: 6px;
        background-color: #e9ecef;
        border-radius: 3px;
        overflow: hidden;
        margin-bottom: 20px;
    }

    .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #007bff 0%, #28a745 100%);
        transition: width 0.5s ease;
        border-radius: 3px;
    }

    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: none;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }

    .loading-spinner {
        background: white;
        padding: 30px;
        border-radius: 10px;
        text-align: center;
    }

    /* Employee details styling */
    .employee-summary-card {
        border: 1px solid #dee2e6;
        border-radius: 8px;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        transition: all 0.3s ease;
    }

    .employee-summary-card:hover {
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        transform: translateY(-2px);
    }

    .employee-detail-item {
        padding: 8px 0;
        border-bottom: 1px solid #e9ecef;
    }

    .employee-detail-item:last-child {
        border-bottom: none;
    }

    .employee-detail-label {
        font-weight: 600;
        color: #495057;
        font-size: 0.875rem;
    }

    .employee-detail-value {
        color: #007bff;
        font-weight: 500;
        font-size: 0.9rem;
    }

    .photo-preview {
        border: 2px dashed #dee2e6;
        border-radius: 8px;
        padding: 20px;
        text-align: center;
        background-color: #f8f9fa;
        transition: all 0.3s ease;
    }

    .photo-preview:hover {
        border-color: #007bff;
        background-color: #e3f2fd;
    }

    .photo-preview img {
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }

    .photo-preview img:hover {
        transform: scale(1.05);
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
    }

    /* Responsive adjustments for step indicator */
    @@media (max-width: 1200px) {
        .step-indicator {
            padding: 0 20px;
            gap: 15px;
        }
        
        .step-label {
            max-width: 100px;
            font-size: 0.8rem;
        }
    }

    @@media (max-width: 768px) {
        .step-indicator {
            padding: 0 10px;
            gap: 10px;
        }
        
        .step-label {
            max-width: 80px;
            font-size: 0.75rem;
        }
        
        .step-item {
            width: 40px;
            height: 40px;
        }
    }
</style>

<div class="container-fluid mt-5">
    <div class="row justify-content-center">
        <div class="col-xl-11 col-lg-12">
            <div class="card shadow-lg p-4 rounded-4 border-0">

                <!-- Language Selector -->
                <div class="d-flex justify-content-end mb-3">
                    <div class="dropdown">
                        <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="languageDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="fas fa-globe me-2"></i><span id="currentLanguage">@Localizer["English"]</span>
                        </button>
                        <ul class="dropdown-menu" aria-labelledby="languageDropdown">
                            <li><a class="dropdown-item" href="#" onclick="changeLanguage('en')">@Localizer["English"]</a></li>
                            <li><a class="dropdown-item" href="#" onclick="changeLanguage('si')">@Localizer["Sinhala"]</a></li>
                            <li><a class="dropdown-item" href="#" onclick="changeLanguage('ta')">@Localizer["Tamil"]</a></li>
                        </ul>
                    </div>
                </div>

                @if (TempData["AlertMessage"] != null)
                {
                    <script>
                        window.onload = function() {
                            alert('@TempData["AlertMessage"]');
                        };
                    </script>
                }

                <!-- Progress Bar -->
                <div class="progress-bar">
                    <div class="progress-fill" id="progressFill" style="width: 25%;"></div>
                </div>

                <!-- Step Indicator -->
                <div class="step-wizard">
                    <div class="step-indicator">
                        <div class="step-item active" data-step="1">
                            <span>1</span>
                            <div class="step-label">@Localizer["BasicInfo"]</div>
                        </div>
                        <div class="step-item" data-step="2">
                            <span>2</span>
                            <div class="step-label">@Localizer["EmployeeDetails"]</div>
                        </div>
                        <div class="step-item" data-step="3">
                            <span>3</span>
                            <div class="step-label">@Localizer["KaizenImages"]</div>
                        </div>
                        <div class="step-item" data-step="4">
                            <span>4</span>
                            <div class="step-label">@Localizer["Benefits"]</div>
                        </div>
                    </div>
                </div>

                <form asp-action="Kaizenform" asp-controller="Kaizen" method="post" enctype="multipart/form-data" id="kaizenForm">
                    <!-- Debug information -->
                    @if (!ViewData.ModelState.IsValid)
                    {
                        <div class="alert alert-danger">
                            <h6>Validation Errors:</h6>
                            <ul>
                                @foreach (var modelState in ViewData.ModelState.Values)
                                {
                                    foreach (var error in modelState.Errors)
                                    {
                                        <li>@error.ErrorMessage</li>
                                    }
                                }
                            </ul>
                        </div>
                    }
                    

                    
                    <!-- Step 1: Basic Information -->
                    <div class="step-content active" id="step1">
                        
                        
                        <div class="step-validation-error" id="step1Error">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <span id="step1ErrorMessage">@Localizer["PleaseCompleteStep"]</span>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label asp-for="DateSubmitted" class="form-label">@Localizer["DateSubmitted"]</label>
                                <input asp-for="DateSubmitted" type="date" class="form-control" />
                                <span asp-validation-for="DateSubmitted" class="text-danger"></span>
                            </div>
                            <div class="col-md-6">
                                <label asp-for="DateImplemented" class="form-label">@Localizer["DateImplemented"] *</label>
                                <input asp-for="DateImplemented" type="date" class="form-control" required />
                                <span asp-validation-for="DateImplemented" class="text-danger"></span>
                                <small class="form-text text-muted">
                                    <i class="fas fa-info-circle me-1"></i>Required to proceed to the next step
                                </small>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label asp-for="KaizenNo" class="form-label">@Localizer["KaizenNo"]</label>
                                <input asp-for="KaizenNo" id="KaizenNo" class="form-control" readonly />
                                <span asp-validation-for="KaizenNo" class="text-danger"></span>
                                <small class="form-text text-muted">Format: [Plant]-[Year]-[Quarter]-[Suggestion No]</small>
                            </div>
                            <div class="col-md-4">
                                <label asp-for="Plant" class="form-label">@Localizer["Plant"]</label>
                                <input asp-for="Plant" class="form-control" readonly />
                                <span asp-validation-for="Plant" class="text-danger"></span>
                                <small class="form-text text-muted">@Localizer["PlantAutoSet"]</small>
                            </div>
                            <div class="col-md-4">
                                <label asp-for="Department" class="form-label">@Localizer["DepartmentName"]</label>
                                <input asp-for="Department" class="form-control" readonly />
                                <span asp-validation-for="Department" class="text-danger"></span>
                                <small class="form-text text-muted">@Localizer["DepartmentAutoSet"]</small>

                                @if (Model?.Department == null || string.IsNullOrEmpty(Model.Department))
                                {
                                    <small class="form-text text-warning">@Localizer["NoDepartmentFound"]: @User.Identity?.Name</small>
                                }
                                else
                                {
                                    <small class="form-text text-success">@Localizer["DepartmentLoaded"]: @Model.Department</small>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Step 2: Employee Details -->
                    <div class="step-content" id="step2">
                        
                        
                        <div class="step-validation-error" id="step2Error">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <span id="step2ErrorMessage">@Localizer["PleaseCompleteStep"]</span>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label asp-for="EmployeeName" class="form-label">@Localizer["EmployeeName"]</label>
                                <input asp-for="EmployeeName" class="form-control" readonly />
                                <span asp-validation-for="EmployeeName" class="text-danger"></span>
                                <small class="form-text text-muted">
                                    <i class="fas fa-info-circle me-1"></i>Auto-populated from your profile
                                </small>
                            </div>
                            <div class="col-md-6">
                                <label asp-for="EmployeeNo" class="form-label">@Localizer["EmployeeNo"]</label>
                                <input asp-for="EmployeeNo" class="form-control" readonly />
                                <span asp-validation-for="EmployeeNo" class="text-danger"></span>
                                <small class="form-text text-muted">
                                    <i class="fas fa-info-circle me-1"></i>Auto-populated from your profile
                                </small>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label">@Localizer["EmployeePhoto"]</label>
                                
                                @if (!string.IsNullOrEmpty(Model.EmployeePhotoPath))
                                {
                                    <div class="mt-2">
                                        <img src="@(Model.EmployeePhotoPath.StartsWith("/") ? Model.EmployeePhotoPath : "/" + Model.EmployeePhotoPath)" alt="Current Profile Photo" class="img-thumbnail" style="max-width: 150px; max-height: 150px;" />
                                        <small class="text-success d-block mt-1">
                                            <i class="fas fa-check-circle me-1"></i>Auto-populated from your profile
                                        </small>
                                    </div>
                                }
                                else
                                {
                                    <div class="text-muted">
                                        <i class="fas fa-user-circle fa-3x"></i>
                                        <p class="mt-2">No profile photo available</p>
                                        <small class="text-info">
                                            <i class="fas fa-info-circle me-1"></i>Auto-populated from your profile
                                        </small>
                                    </div>
                                }
                                
                                <!-- Hidden field to submit EmployeePhotoPath with the form -->
                                <input type="hidden" asp-for="EmployeePhotoPath" />
                            </div>
                        </div>


                    </div>

                    <!-- Step 3: Kaizen Images -->
                    <div class="step-content" id="step3">
                        
                        
                        <div class="step-validation-error" id="step3Error">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <span id="step3ErrorMessage">@Localizer["PleaseCompleteStep"]</span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="SuggestionDescription" class="form-label">@Localizer["SuggestionDescription"]</label>
                            <textarea asp-for="SuggestionDescription" class="form-control" rows="3"></textarea>
                            <span asp-validation-for="SuggestionDescription" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="BeforeKaizenImage" class="form-label">@Localizer["BeforeKaizenImage"]</label>
                            <input asp-for="BeforeKaizenImage" type="file" class="form-control" accept="image/*" />
                            <span asp-validation-for="BeforeKaizenImage" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="AfterKaizenImage" class="form-label">@Localizer["AfterKaizenImage"]</label>
                            <input asp-for="AfterKaizenImage" type="file" class="form-control" accept="image/*" />
                            <span asp-validation-for="AfterKaizenImage" class="text-danger"></span>
                        </div>
                    </div>

                                         <!-- Step 4: Benefits & Submit -->
                     <div class="step-content" id="step4">
                        
                         
                         <div class="step-validation-error" id="step4Error">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <span id="step4ErrorMessage">@Localizer["PleaseCompleteStep"]</span>
                        </div>

                        <!-- Cost Saving Section -->
                        <div class="cost-saving-section">
                            <h5 class="mb-3">@Localizer["CostSavingInformation"]</h5>

                            <div class="radio-group">
                                <div class="radio-item">
                                    <input type="radio" asp-for="CostSavingType" id="noCostSaving" value="NoCostSaving" checked />
                                    <label for="noCostSaving">@Localizer["NoCostSaving"]</label>
                                </div>
                                <div class="radio-item">
                                    <input type="radio" asp-for="CostSavingType" id="hasCostSaving" value="HasCostSaving" />
                                    <label for="hasCostSaving">@Localizer["HasCostSaving"]</label>
                                </div>
                            </div>

                            <div id="costSavingFields" class="conditional-field @(Model?.CostSavingType == "HasCostSaving" ? "show" : "")">
                                <div class="row">
                                    <div class="col-md-6">
                                        <label asp-for="CostSaving" class="form-label">@Localizer["CostSaving"]</label>
                                        <input asp-for="CostSaving" class="form-control" type="number" step="0.01" min="0" />
                                        <span asp-validation-for="CostSaving" class="text-danger"></span>
                                    </div>
                                    <div class="col-md-6">
                                        <label asp-for="DollarRate" class="form-label">@Localizer["DollarRate"]</label>
                                        <input asp-for="DollarRate" class="form-control" type="number" step="0.01" min="0" />
                                        <span asp-validation-for="DollarRate" class="text-danger"></span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="OtherBenefits" class="form-label">@Localizer["OtherBenefits"]</label>
                            <textarea asp-for="OtherBenefits" class="form-control" rows="2"></textarea>
                            <span asp-validation-for="OtherBenefits" class="text-danger"></span>
                        </div>
                    </div>

                    <!-- Navigation Buttons -->
                    <div class="step-navigation">
                        <button type="button" class="btn btn-nav btn-prev" id="prevBtn" style="display: none;">
                            <i class="fas fa-arrow-left"></i>
                            @Localizer["Previous"]
                        </button>
                        <div></div> <!-- Spacer -->
                        <button type="button" class="btn btn-nav btn-next" id="nextBtn">
                            @Localizer["Next"]
                            <i class="fas fa-arrow-right"></i>
                        </button>
                        <button type="submit" class="btn btn-nav btn-submit" id="submitBtn" style="display: none;">
                            <i class="fas fa-check"></i>
                            @Localizer["SubmitSuggestion"]
                        </button>
                    </div>
                </form>
                
                <!-- Success Message Display -->
                @if (TempData["Success"] != null)
                {
                    <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
                        <i class="fas fa-check-circle me-2"></i>
                        @TempData["Success"]
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                }

                <!-- Debug Information (only show in development) -->
                @if (Context.Request.Query.ContainsKey("debug"))
                {
                    <div class="alert alert-info mt-3">
                        <h6><i class="fas fa-info-circle me-2"></i>Debug Information</h6>
                        <p><strong>Current User:</strong> @User.Identity?.Name</p>
                        <p><strong>Department:</strong> @Model?.Department</p>
                        <p><strong>Kaizen No:</strong> @Model?.KaizenNo</p>
                        <p><strong>Date Submitted:</strong> @Model?.DateSubmitted.ToString("yyyy-MM-dd")</p>
                        <p><strong>Form Action:</strong> @Url.Action("Kaizenform", "Kaizen")</p>
                        <p><strong>Success Page:</strong> @Url.Action("SuccessMessage", "Home")</p>
                    </div>
                }

                <!-- Test Form Button (for debugging) -->
                @if (Context.Request.Query.ContainsKey("test"))
                {
                    <div class="alert alert-warning mt-3">
                        <h6><i class="fas fa-flask me-2"></i>Test Mode</h6>
                        <p>This is a test mode to verify form submission. Fill in the form and submit to test the complete flow.</p>
                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="fillTestData()">
                            <i class="fas fa-magic me-1"></i>Fill Test Data
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Loading Overlay -->
<div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner">
        <div class="spinner-border text-primary mb-3" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <h5>Submitting Kaizen Suggestion...</h5>
        <p class="text-muted">Please wait while we save your data.</p>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}

<script>
    // Translations object
    const translations = {
        en: {
            title: "Kaizen Suggestion Form",
            requiredFieldsNote: "Fields marked with * are required",
            dateSubmitted: "Date Submitted",
            dateImplemented: "Date Implemented *",
            kaizenNo: "Kaizen No",
            plant: "Plant",
            department: "Department / Cell",
            employeeName: "Employee Name",
            employeeNo: "Employee No",
            employeePhoto: "Employee Photo *",
            suggestionDescription: "Kaizen Suggestion Description",
            beforeKaizenImage: "Before Kaizen Image (Upload QR/Image) *",
            afterKaizenImage: "After Kaizen Image (Upload QR/Image) *",
            costSavingTitle: "Cost Saving Information",
            noCostSaving: "No Cost Saving",
            hasCostSaving: "Has Cost Saving",
            costSaving: "Cost Saving ($ per year)",
            dollarRate: "Current Dollar Rate",
            otherBenefits: "Other Benefits *",
            submitButton: "Submit Suggestion",
            basicInfo: "Basic Info",
            employeeDetails: "Employee Details",
            kaizenImages: "Kaizen Images",
            benefits: "Benefits",
            previous: "Previous",
            next: "Next"
        },
        si: {
            title: "කයිසන් යෝජනා පෝරමය",
            requiredFieldsNote: "* සලකුණු කර ඇති ක්ෂේත්‍ර අවශ්‍ය වේ",
            dateSubmitted: "ඉදිරිපත් කළ දිනය",
            dateImplemented: "ක්‍රියාත්මක කළ දිනය *",
            kaizenNo: "කයිසන් අංකය",
            plant: "ශාඛාව",
            department: "දෙපාර්තමේන්තුව ",
            employeeName: "සේවක නම",
            employeeNo: "සේවක අංකය",
            employeePhoto: "සේවක ඡායාරූපය *",
            suggestionDescription: "කයිසන් යෝජනා විස්තරය",
            beforeKaizenImage: "කයිසන් පෙර රූපය (QR/රූපය උඩුගත කරන්න) *",
            afterKaizenImage: "කයිසන් පසු රූපය (QR/රූපය උඩුගත කරන්න) *",
            costSavingTitle: "පිරිවැය ඉතිරිකිරීමේ තොරතුරු",
            noCostSaving: "පිරිවැය ඉතිරිකිරීමක් නැත",
            hasCostSaving: "පිරිවැය ඉතිරිකිරීමක් ඇත",
            costSaving: "පිරිවැය ඉතිරිකිරීම (වර්ෂයකට ඩොලර්)",
            dollarRate: "වර්තමාන ඩොලර් අනුපාතය",
            otherBenefits: "වෙනත් ප්‍රතිලාභ *",
            submitButton: "යෝජනාව ඉදිරිපත් කරන්න",
            basicInfo: "මූලික තොරතුරු",
            employeeDetails: "සේවක විස්තර",
            kaizenImages: "කයිසන් රූප",
            benefits: "ප්‍රතිලාභ",
            previous: "පෙර",
            next: "ඊළඟ"
        },
        ta: {
            title: "கைசென் பரிந்துரை படிவம்",
            requiredFieldsNote: "* குறிக்கப்பட்ட புலங்கள் தேவை",
            dateSubmitted: "சமர்ப்பித்த தேதி",
            dateImplemented: "செயல்படுத்தப்பட்ட தேதி *",
            kaizenNo: "கைசென் எண்",
            plant: "தொழிற்சாலை",
            department: "துறை / செல்",
            employeeName: "பணியாளர் பெயர்",
            employeeNo: "பணியாளர் எண்",
            employeePhoto: "பணியாளர் புகைப்படம் *",
            suggestionDescription: "கைசென் பரிந்துரை விளக்கம்",
            beforeKaizenImage: "கைசென் முன் படம் (QR/படம் பதிவேற்றவும்) *",
            afterKaizenImage: "கைசென் பின் படம் (QR/படம் பதிவேற்றவும்) *",
            costSavingTitle: "செலவு சேமிப்பு தகவல்",
            noCostSaving: "செலவு சேமிப்பு இல்லை",
            hasCostSaving: "செலவு சேமிப்பு உள்ளது",
            costSaving: "செலவு சேமிப்பு (வருடத்திற்கு டாலர்)",
            dollarRate: "தற்போதைய டாலர் விகிதம்",
            otherBenefits: "மற்ற நன்மைகள் *",
            submitButton: "பரிந்துரையை சமர்ப்பிக்கவும்",
            basicInfo: "அடிப்படை தகவல்",
            employeeDetails: "ஊழியர் விவரங்கள்",
            kaizenImages: "கைசென் படங்கள்",
            benefits: "நன்மைகள்",
            previous: "முந்தைய",
            next: "அடுத்த"
        }
    };

    // Step management
    let currentStep = 1;
    const totalSteps = 4;

    // Check if there's a validation error step from server
    @if (TempData["ErrorStep"] != null)
    {
        <text>
        currentStep = @TempData["ErrorStep"];
        </text>
    }

    function generateKaizenNo() {
        // Get plant from the form or use default
        const plantInput = document.getElementById('Plant');
        const plant = plantInput ? plantInput.value : 'KTY';
        
        // Get current year (last 2 digits)
        const year = new Date().getFullYear().toString().substring(2); // e.g., "25" for 2025
        
        // Get current quarter (3 months per quarter)
        const month = new Date().getMonth() + 1; // getMonth() returns 0-11
        const quarter = Math.ceil(month / 3); // 1-3 = Q1, 4-6 = Q2, 7-9 = Q3, 10-12 = Q4
        
        // For now, use a random suggestion number (in real implementation, this would be from server)
        const suggestionNum = Math.floor(1 + Math.random() * 99); // 1-99
        
        return `${plant}-${year}-${quarter.toString().padStart(2, '0')}-${suggestionNum.toString().padStart(2, '0')}`;
    }

    // Handle cost saving radio button changes
    function handleCostSavingChange() {
        const hasCostSaving = document.getElementById('hasCostSaving');
        const costSavingFields = document.getElementById('costSavingFields');

        if (hasCostSaving.checked) {
            costSavingFields.classList.add('show');
        } else {
            costSavingFields.classList.remove('show');
            // Clear the fields when hiding
            document.getElementById('CostSaving').value = '';
            document.getElementById('DollarRate').value = '';
        }
    }

    // Step validation functions - Enhanced with better error messages
    function validateStep1() {
        console.log('Validating step 1...');
        
        // Check if Date Implemented is filled
        const dateImplemented = document.getElementById('DateImplemented').value.trim();
        if (!dateImplemented) {
            showStepError(1, 'Date Implemented is required to proceed to the next step.');
            return false;
        }
        
        hideStepError(1);
        console.log('Step 1 validation passed');
        return true;
    }

    function validateStep2() {
        console.log('Validating step 2...');
        const employeeName = document.getElementById('EmployeeName').value.trim();
        const employeeNo = document.getElementById('EmployeeNo').value.trim();
        
        if (!employeeName) {
            showStepError(2, '@Localizer["EmployeeNameRequired"]');
            return false;
        }
        
        if (!employeeNo) {
            showStepError(2, '@Localizer["EmployeeNoRequired"]');
            return false;
        }
        
        hideStepError(2);
        console.log('Step 2 validation passed');
        return true;
    }

    function validateStep3() {
        console.log('Validating step 3...');
        const suggestionDescription = document.getElementById('SuggestionDescription').value.trim();
        
        if (!suggestionDescription) {
            showStepError(3, '@Localizer["SuggestionDescriptionRequired"]');
            return false;
        }
        
        hideStepError(3);
        console.log('Step 3 validation passed');
        return true;
    }

    function validateStep4() {
        console.log('Validating step 4...');
        const costSavingType = document.querySelector('input[name="CostSavingType"]:checked')?.value;
        
        if (costSavingType === 'HasCostSaving') {
            const costSaving = document.getElementById('CostSaving').value;
            const dollarRate = document.getElementById('DollarRate').value;
            
            if (!costSaving || parseFloat(costSaving) <= 0) {
                showStepError(4, '@Localizer["CostSavingRequired"]');
                return false;
            }
            
            if (!dollarRate || parseFloat(dollarRate) <= 0) {
                showStepError(4, '@Localizer["DollarRateRequired"]');
                return false;
            }
        }
        
        hideStepError(4);
        console.log('Step 4 validation passed');
        return true;
    }

    function showStepError(step, message) {
        const errorDiv = document.getElementById(`step${step}Error`);
        const messageSpan = document.getElementById(`step${step}ErrorMessage`);
        errorDiv.classList.add('show');
        messageSpan.textContent = message;
    }

    function hideStepError(step) {
        const errorDiv = document.getElementById(`step${step}Error`);
        errorDiv.classList.remove('show');
    }

    function updateStepIndicator() {
        // Update step indicators
        document.querySelectorAll('.step-item').forEach((item, index) => {
            const stepNum = index + 1;
            item.classList.remove('active', 'completed');
            
            if (stepNum < currentStep) {
                item.classList.add('completed');
            } else if (stepNum === currentStep) {
                item.classList.add('active');
            }
        });

        // Update progress bar
        const progress = (currentStep / totalSteps) * 100;
        document.getElementById('progressFill').style.width = progress + '%';

        // Update navigation buttons
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');
        const submitBtn = document.getElementById('submitBtn');

        prevBtn.style.display = currentStep > 1 ? 'flex' : 'none';
        nextBtn.style.display = currentStep < totalSteps ? 'flex' : 'none';
        submitBtn.style.display = currentStep === totalSteps ? 'flex' : 'none';
    }

    function showStep(step) {
        // Hide all steps
        document.querySelectorAll('.step-content').forEach(content => {
            content.classList.remove('active');
        });

        // Show current step
        const currentStepElement = document.getElementById(`step${step}`);
        if (currentStepElement) {
            currentStepElement.classList.add('active');
        }
        
        // Update step indicator
        updateStepIndicator();
    }

    function nextStep() {
        let isValid = false;
        
        switch (currentStep) {
            case 1:
                isValid = validateStep1();
                break;
            case 2:
                isValid = validateStep2();
                break;
            case 3:
                isValid = validateStep3();
                break;
            case 4:
                isValid = validateStep4();
                break;
        }
        
        if (isValid && currentStep < totalSteps) {
            currentStep++;
            showStep(currentStep);
        }
    }

    function prevStep() {
        if (currentStep > 1) {
            currentStep--;
            showStep(currentStep);
        }
    }

    function showLoading() {
        document.getElementById('loadingOverlay').style.display = 'flex';
    }

    function hideLoading() {
        document.getElementById('loadingOverlay').style.display = 'none';
    }

    // Language change function
    function changeLanguage(lang) {
        // Set the culture cookie
        document.cookie = `ASPNET_CORE_CULTURE=${lang}; path=/; max-age=31536000`;
        
        // Update all text elements with the new language
        updatePageLanguage(lang);
        
        // Update current language display
        setCurrentLanguageDisplay();
    }

    // Function to update page language
    function updatePageLanguage(lang) {
        const currentTranslations = translations[lang] || translations['en'];
        
        // Update form labels
        updateLabel('DateSubmitted', currentTranslations.dateSubmitted);
        updateLabel('DateImplemented', currentTranslations.dateImplemented);
        updateLabel('KaizenNo', currentTranslations.kaizenNo);
        updateLabel('Plant', currentTranslations.plant);
        updateLabel('Department', currentTranslations.department);
        updateLabel('EmployeeName', currentTranslations.employeeName);
        updateLabel('EmployeeNo', currentTranslations.employeeNo);
        updateLabel('EmployeePhoto', currentTranslations.employeePhoto);
        updateLabel('SuggestionDescription', currentTranslations.suggestionDescription);
        updateLabel('BeforeKaizenImage', currentTranslations.beforeKaizenImage);
        updateLabel('AfterKaizenImage', currentTranslations.afterKaizenImage);
        updateLabel('OtherBenefits', currentTranslations.otherBenefits);
        
        // Update step labels
        updateStepLabel('step1', currentTranslations.basicInfo);
        updateStepLabel('step2', currentTranslations.employeeDetails);
        updateStepLabel('step3', currentTranslations.kaizenImages);
        updateStepLabel('step4', currentTranslations.benefits);
        
        // Update cost saving section
        updateElementText('.cost-saving-section h5', currentTranslations.costSavingTitle);
        updateElementText('#noCostSaving + label', currentTranslations.noCostSaving);
        updateElementText('#hasCostSaving + label', currentTranslations.hasCostSaving);
        updateLabel('CostSaving', currentTranslations.costSaving);
        updateLabel('DollarRate', currentTranslations.dollarRate);
        
        // Update buttons
        updateElementText('#prevBtn', currentTranslations.previous);
        updateElementText('#nextBtn', currentTranslations.next);
        updateElementText('#submitBtn', currentTranslations.submitButton);
        
        // Update language dropdown
        const languageMap = {
            'en': 'English',
            'si': 'සිංහල',
            'ta': 'தமிழ்'
        };
        updateElementText('#currentLanguage', languageMap[lang] || languageMap['en']);
    }

    // Helper function to update label text
    function updateLabel(forAttribute, newText) {
        const label = document.querySelector(`label[for="${forAttribute}"]`);
        if (label) {
            label.textContent = newText;
        }
    }

    // Helper function to update step label
    function updateStepLabel(stepId, newText) {
        const stepElement = document.querySelector(`[data-step="${stepId.replace('step', '')}"] .step-label`);
        if (stepElement) {
            stepElement.textContent = newText;
        }
    }

    // Helper function to update element text
    function updateElementText(selector, newText) {
        const element = document.querySelector(selector);
        if (element) {
            element.textContent = newText;
        }
    }

    // Set current language display
    function setCurrentLanguageDisplay() {
        const currentLang = document.cookie.match(/ASPNET_CORE_CULTURE=([^;]+)/)?.[1] || 'en';
        const languageMap = {
            'en': 'English',
            'si': 'සිංහල',
            'ta': 'தமிழ்'
        };
        
        const currentLanguageSpan = document.getElementById('currentLanguage');
        if (currentLanguageSpan) {
            currentLanguageSpan.textContent = languageMap[currentLang] || languageMap['en'];
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        const kaizenInput = document.getElementById('KaizenNo');
        if (kaizenInput && !kaizenInput.value) {
            kaizenInput.value = generateKaizenNo();
        }

        // Add event listeners for cost saving radio buttons
        document.getElementById('noCostSaving').addEventListener('change', handleCostSavingChange);
        document.getElementById('hasCostSaving').addEventListener('change', handleCostSavingChange);

        // Add navigation event listeners
        document.getElementById('nextBtn').addEventListener('click', nextStep);
        document.getElementById('prevBtn').addEventListener('click', prevStep);

        // Set current language display and update page language
        const currentLang = document.cookie.match(/ASPNET_CORE_CULTURE=([^;]+)/)?.[1] || 'en';
        setCurrentLanguageDisplay();
        updatePageLanguage(currentLang);

        // Initialize step display
        showStep(currentStep);

        // Show validation errors if any from server
        @if (TempData["ImageValidationError"] != null)
        {
            <text>
            // Show image validation error message
            const errorStep = @TempData["ErrorStep"];
            if (errorStep) {
                showStepError(errorStep, '@Localizer["ImageFormatError"]');
            }
            </text>
        }
    });

    // Enhanced form submission handling
    const kaizenForm = document.getElementById('kaizenForm');
    if (kaizenForm) {
        kaizenForm.addEventListener('submit', function(event) {
            console.log('Form submit event triggered');
            
            // Show loading overlay
            showLoading();
            
            // Log form data for debugging before validation
            const formData = new FormData(this);
            console.log('Form data being submitted:');
            for (let [key, value] of formData.entries()) {
                console.log(`${key}: ${value}`);
            }
            
            // Use enhanced validation
            if (!validateAndSubmitForm()) {
                hideLoading();
                event.preventDefault();
                return false;
            }
            
            console.log('Form validation passed, submitting to server...');
            
            // Allow form submission - server will handle the rest
            return true;
        });
    }

    // Function to fill test data (for debugging)
    function fillTestData() {
        console.log('Filling test data...');
        document.getElementById('EmployeeName').value = 'Test Employee';
        document.getElementById('EmployeeNo').value = 'EMP001';
        document.getElementById('DateSubmitted').value = new Date().toISOString().slice(0, 10);
        document.getElementById('DateImplemented').value = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().slice(0, 10);
        document.getElementById('KaizenNo').value = generateKaizenNo();
        document.getElementById('SuggestionDescription').value = 'This is a test description for a Kaizen suggestion.';
        document.getElementById('CostSaving').value = '10000';
        document.getElementById('DollarRate').value = '200';
        document.getElementById('OtherBenefits').value = 'This is a test other benefit for a Kaizen suggestion.';
        document.getElementById('BeforeKaizenImage').value = ''; // Clear previous file input
        document.getElementById('AfterKaizenImage').value = ''; // Clear previous file input
        console.log('Test data filled.');
    }

    // Function to test form submission (for debugging)
    function testFormSubmission() {
        console.log('Testing form submission...');
        
        // Fill test data
        fillTestData();
        
        // Show all steps to ensure all data is visible
        for (let i = 1; i <= 4; i++) {
            showStep(i);
        }
        
        // Log form data before submission
        const formData = new FormData(document.getElementById('kaizenForm'));
        console.log('Form data to be submitted:');
        for (let [key, value] of formData.entries()) {
            console.log(`${key}: ${value}`);
        }
        
        // Submit the form
        document.getElementById('kaizenForm').submit();
    }

    // Function to refresh employee data
    async function refreshEmployeeData() {
        console.log('Refreshing employee data...');
        
        try {
            // Show loading state
            const refreshBtn = document.querySelector('button[onclick="refreshEmployeeData()"]');
            const originalText = refreshBtn.innerHTML;
            refreshBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Loading...';
            refreshBtn.disabled = true;
            
            // Make AJAX call to get fresh employee data
            const response = await fetch('/Kaizen/GetCurrentEmployeeData', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                }
            });
            
            if (response.ok) {
                const data = await response.json();
                console.log('Employee data received:', data);
                
                if (data.success) {
                    // Update form fields
                    document.getElementById('EmployeeName').value = data.employeeName || '';
                    document.getElementById('EmployeeNo').value = data.employeeNo || '';
                    
                    // Update display fields
                    document.getElementById('displayEmployeeName').textContent = data.employeeName || 'Not available';
                    document.getElementById('displayEmployeeNo').textContent = data.employeeNo || 'Not available';
                    document.getElementById('displayDepartment').textContent = data.department || 'Not available';
                    document.getElementById('displayPlant').textContent = data.plant || 'Not available';
                    
                    // Update employee photo display
                    const photoContainer = document.querySelector('.col-md-6 .text-center');
                    const photoStatus = document.getElementById('employeePhotoStatus');
                    
                    if (data.employeePhotoPath) {
                        // Update the photo display
                        photoContainer.innerHTML = `
                            <img src="/${data.employeePhotoPath}" alt="Current Profile Photo" class="img-thumbnail" style="max-width: 150px; max-height: 150px;" />
                            <div class="mt-2">
                                <small class="text-success">
                                    <i class="fas fa-check-circle me-1"></i>Profile photo loaded successfully
                                </small>
                            </div>
                        `;
                        
                        // Update status
                        photoStatus.innerHTML = `
                            <small class="text-success">
                                <i class="fas fa-check-circle me-1"></i>Employee photo available in system
                            </small>
                        `;
                    } else {
                        // Update the photo display
                        photoContainer.innerHTML = `
                            <div class="text-muted">
                                <i class="fas fa-user-circle fa-3x"></i>
                                <p class="mt-2">No profile photo available</p>
                                <small class="text-info">
                                    <i class="fas fa-info-circle me-1"></i>Upload a new photo above
                                </small>
                            </div>
                        `;
                        
                        // Update status
                        photoStatus.innerHTML = `
                            <small class="text-warning">
                                <i class="fas fa-exclamation-triangle me-1"></i>No employee photo found in system
                            </small>
                        `;
                    }
                    
                    // Show success message
                    showToast('Employee data refreshed successfully!', 'success');
                } else {
                    showToast('Failed to refresh employee data: ' + (data.message || 'Unknown error'), 'error');
                }
            } else {
                showToast('Failed to refresh employee data. Please try again.', 'error');
            }
        } catch (error) {
            console.error('Error refreshing employee data:', error);
            showToast('Error refreshing employee data: ' + error.message, 'error');
        } finally {
            // Restore button state
            const refreshBtn = document.querySelector('button[onclick="refreshEmployeeData()"]');
            refreshBtn.innerHTML = '<i class="fas fa-sync-alt me-1"></i>Refresh Data';
            refreshBtn.disabled = false;
        }
    }

    // Function to show toast notifications
    function showToast(message, type = 'info') {
        // Create toast container if it doesn't exist
        let toastContainer = document.getElementById('toastContainer');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.id = 'toastContainer';
            toastContainer.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 9999;
                max-width: 350px;
            `;
            document.body.appendChild(toastContainer);
        }
        
        // Create toast element
        const toast = document.createElement('div');
        toast.className = `alert alert-${type === 'error' ? 'danger' : type === 'success' ? 'success' : 'info'} alert-dismissible fade show`;
        toast.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        `;
        
        // Add to container
        toastContainer.appendChild(toast);
        
        // Auto-remove after 5 seconds
        setTimeout(() => {
            if (toast.parentNode) {
                toast.remove();
            }
        }, 5000);
    }



    // Enhanced form validation and submission
    function validateAndSubmitForm() {
        console.log('Validating and submitting form...');
        
        // Collect all form data
        const formData = {
            employeeName: document.getElementById('EmployeeName')?.value?.trim(),
            employeeNo: document.getElementById('EmployeeNo')?.value?.trim(),
            suggestionDescription: document.getElementById('SuggestionDescription')?.value?.trim(),
            dateSubmitted: document.getElementById('DateSubmitted')?.value,
            dateImplemented: document.getElementById('DateImplemented')?.value,
            kaizenNo: document.getElementById('KaizenNo')?.value,
            plant: document.getElementById('Plant')?.value,
            department: document.getElementById('Department')?.value,
            costSavingType: document.querySelector('input[name="CostSavingType"]:checked')?.value,
            costSaving: document.getElementById('CostSaving')?.value,
            dollarRate: document.getElementById('DollarRate')?.value,
            otherBenefits: document.getElementById('OtherBenefits')?.value?.trim()
        };
        
        console.log('Collected form data:', formData);
        
        // Validate essential fields
        if (!formData.employeeName) {
            alert('@Localizer["EmployeeNameRequired"]');
            return false;
        }
        
        if (!formData.employeeNo) {
            alert('@Localizer["EmployeeNoRequired"]');
            return false;
        }
        
        if (!formData.suggestionDescription) {
            alert('@Localizer["SuggestionDescriptionRequired"]');
            return false;
        }
        
        if (!formData.plant) {
            alert('Plant is required. Please ensure you are logged in with a valid plant.');
            return false;
        }
        
        // Validate cost saving fields if "Has Cost Saving" is selected
        if (formData.costSavingType === 'HasCostSaving') {
            if (!formData.costSaving || parseFloat(formData.costSaving) <= 0) {
                alert('@Localizer["CostSavingRequired"]');
                return false;
            }
            
            if (!formData.dollarRate || parseFloat(formData.dollarRate) <= 0) {
                alert('@Localizer["DollarRateRequired"]');
                return false;
            }
        }
        
        console.log('Form validation passed, submitting...');
        return true;
    }
</script>
