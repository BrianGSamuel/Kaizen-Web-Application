@model KaizenWebApp.ViewModels.AwardDetailsViewModel

@{
    ViewData["Title"] = "Kaizen Details";
    Layout = "~/Views/Shared/_SupervisorLayout.cshtml";
}

<style>
    body {
        background-color: #f8f9fa;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: #333;
        line-height: 1.6;
    }

    .kaizen-details-container {
        background: white;
        border-radius: 8px;
        padding: 2rem;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
        margin-bottom: 2rem;
        border: 1px solid #e9ecef;
    }

    .kaizen-header {
        background: #2c3e50;
        color: white;
        padding: 2rem;
        border-radius: 8px;
        margin-bottom: 2rem;
        position: relative;
    }

    .kaizen-no {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
        letter-spacing: 1px;
    }

    .kaizen-status {
        display: inline-block;
        padding: 0.5rem 1rem;
        border-radius: 4px;
        font-weight: 600;
        font-size: 0.9rem;
        margin-bottom: 1rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .status-pending {
        background: #f8f9fa;
        color: #6c757d;
        border: 1px solid #dee2e6;
    }

    .status-approved {
        background: #e9ecef;
        color: #495057;
        border: 1px solid #ced4da;
    }

    .status-rejected {
        background: #f8f9fa;
        color: #6c757d;
        border: 1px solid #dee2e6;
    }

    .info-section {
        background: #f8f9fa;
        border-radius: 6px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        border-left: 4px solid #6c757d;
    }

        .info-section h5 {
            color: #2c3e50;
            margin-bottom: 1rem;
            font-weight: 600;
            font-size: 1.1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

            .info-section h5 i {
                background: #6c757d;
                color: white;
                padding: 0.4rem;
                border-radius: 4px;
                font-size: 0.9rem;
            }

    .info-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1rem;
    }

    .info-item {
        background: white;
        padding: 1rem;
        border-radius: 4px;
        border: 1px solid #dee2e6;
    }

    .info-label {
        font-weight: 600;
        color: #6c757d;
        font-size: 0.85rem;
        margin-bottom: 0.5rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .info-value {
        color: #2c3e50;
        font-size: 1rem;
        font-weight: 500;
    }

    .employee-card {
        display: flex;
        align-items: center;
        background: white;
        padding: 1.5rem;
        border-radius: 6px;
        border: 1px solid #dee2e6;
        margin-bottom: 1rem;
    }

    .employee-photo {
        width: 70px;
        height: 70px;
        border-radius: 50%;
        object-fit: cover;
        border: 3px solid #6c757d;
        margin-right: 1rem;
    }

    .employee-photo-placeholder {
        width: 70px;
        height: 70px;
        border-radius: 50%;
        background: #6c757d;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 1rem;
        color: white;
        font-size: 1.5rem;
    }

    .employee-info h6 {
        margin-bottom: 0.25rem;
        color: #2c3e50;
        font-size: 1.2rem;
        font-weight: 600;
    }

    .employee-info p {
        margin-bottom: 0.25rem;
        color: #6c757d;
        font-size: 0.95rem;
    }

    .image-section {
        background: white;
        border-radius: 6px;
        padding: 1.5rem;
        border: 1px solid #dee2e6;
        margin-bottom: 1.5rem;
    }

    .image-container {
        text-align: center;
        margin-bottom: 1rem;
    }

    .kaizen-image {
        max-width: 100%;
        max-height: 300px;
        border-radius: 6px;
        border: 1px solid #dee2e6;
    }

    .cost-saving-card {
        background: #e9ecef;
        color: #2c3e50;
        padding: 2rem;
        border-radius: 6px;
        text-align: center;
        margin-bottom: 1.5rem;
        border: 1px solid #dee2e6;
    }

    .cost-saving-amount {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
        color: #2c3e50;
    }

    .action-buttons {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
        margin-top: 2rem;
        padding-top: 2rem;
        border-top: 1px solid #dee2e6;
    }

    .btn-kaizen {
        padding: 0.75rem 1.5rem;
        border-radius: 4px;
        font-weight: 600;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        transition: all 0.2s ease;
        border: 1px solid #dee2e6;
        cursor: pointer;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

        .btn-kaizen:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            text-decoration: none;
        }

    .btn-edit {
        background: #2c3e50;
        color: white;
        border-color: #2c3e50;
    }

    .btn-executive {
        background: #6c757d;
        color: white;
        border-color: #6c757d;
    }

    .btn-back {
        background: #f8f9fa;
        color: #6c757d;
        border-color: #dee2e6;
    }

    .btn-approval {
        background: #495057;
        color: white;
        border-color: #495057;
    }

    .btn-kaizen:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        background: #6c757d;
        color: #adb5bd;
        border-color: #6c757d;
        transform: none;
        box-shadow: none;
    }

    .btn-kaizen:disabled:hover {
        transform: none;
        box-shadow: none;
        opacity: 0.6;
    }

    .no-data {
        text-align: center;
        padding: 3rem 2rem;
        color: #6c757d;
        background: #f8f9fa;
        border-radius: 6px;
        border: 1px dashed #dee2e6;
    }

        .no-data i {
            font-size: 3rem;
            margin-bottom: 1rem;
            opacity: 0.5;
            color: #6c757d;
        }

        .no-data p {
            font-size: 1rem;
            font-weight: 500;
            margin: 0;
        }

    /* Modal Styles */
    .modal-content {
        border-radius: 8px;
        border: 1px solid #dee2e6;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
    }

    .modal-header {
        background: #2c3e50;
        color: white;
        border-radius: 8px 8px 0 0;
        padding: 1rem 1.5rem;
        border-bottom: 1px solid #dee2e6;
    }

    .modal-title {
        font-weight: 600;
        font-size: 1.1rem;
    }

    .modal-body {
        padding: 1.5rem;
    }

    .form-label {
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
    }

    .form-control {
        border-radius: 4px;
        border: 1px solid #dee2e6;
        padding: 0.5rem 0.75rem;
        transition: border-color 0.2s ease;
    }

        .form-control:focus {
            border-color: #6c757d;
            box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.25);
        }

    .btn {
        border-radius: 4px;
        font-weight: 600;
        padding: 0.5rem 1rem;
        transition: all 0.2s ease;
        border: 1px solid #dee2e6;
    }

        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

    .btn-primary {
        background: #2c3e50;
        border-color: #2c3e50;
        color: white;
    }

    .btn-secondary {
        background: #6c757d;
        border-color: #6c757d;
        color: white;
    }

    .btn-success {
        background: #495057;
        border-color: #495057;
        color: white;
    }

    .btn-danger {
        background: #6c757d;
        border-color: #6c757d;
        color: white;
    }

    .btn-warning {
        background: #495057;
        border-color: #495057;
        color: white;
    }

    /* Suggestions container styles */
    .suggestions-container {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 1px solid #dee2e6;
        border-top: none;
        border-radius: 0 0 4px 4px;
        max-height: 200px;
        overflow-y: auto;
        z-index: 1000;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .suggestion-item {
        padding: 8px 12px;
        cursor: pointer;
        border-bottom: 1px solid #f8f9fa;
        transition: background-color 0.2s ease;
    }

        .suggestion-item:hover {
            background-color: #f8f9fa;
        }

        .suggestion-item.selected {
            background-color: #007bff;
            color: white;
        }

        .suggestion-item:last-child {
            border-bottom: none;
        }

    /* Position the input field container relatively for absolute positioning of suggestions */
    #implementationAreaField {
        position: relative;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .kaizen-details-container {
            padding: 1.5rem;
            margin: 1rem;
        }

        .kaizen-header {
            padding: 1.5rem;
        }

        .kaizen-no {
            font-size: 2rem;
        }

        .info-grid {
            grid-template-columns: 1fr;
        }

        .action-buttons {
            flex-direction: column;
            gap: 0.75rem;
        }

        .btn-kaizen {
            justify-content: center;
            width: 100%;
        }

        .employee-card {
            flex-direction: column;
            text-align: center;
        }

        .employee-photo,
        .employee-photo-placeholder {
            margin-right: 0;
            margin-bottom: 1rem;
        }
    }

    @@media (max-width: 576px) {
        .kaizen-header {
            padding: 1rem;
        }

        .kaizen-no {
            font-size: 1.75rem;
        }

        .cost-saving-amount {
            font-size: 2rem;
        }
    }
</style>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="kaizen-details-container">

                <!-- Kaizen Header -->
                <div class="kaizen-header">
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <div class="kaizen-no">@Model.Kaizen.KaizenNo</div>
                            <div class="kaizen-status @(Model.Kaizen.EngineerStatus == "Approved" ? "status-approved" : Model.Kaizen.EngineerStatus == "Rejected" ? "status-rejected" : "status-pending")">
                                <i class="fas fa-@(Model.Kaizen.EngineerStatus == "Approved" ? "check" : Model.Kaizen.EngineerStatus == "Rejected" ? "times" : "clock") me-2"></i>
                                Engineer Status: @(Model.Kaizen.EngineerStatus ?? "Pending")
                            </div>
                            <p class="mb-0 opacity-75">Kaizen Suggestion Details</p>
                        </div>
                        <div class="text-end">
                            <small class="opacity-75">Submitted on</small><br>
                            <strong>@Model.Kaizen.DateSubmitted.ToString("MMMM dd, yyyy")</strong>
                        </div>
                    </div>
                </div>

                <!-- Employee Information -->
                <div class="info-section">
                    <h5><i class="fas fa-user me-2"></i>Employee Information</h5>
                    <div class="employee-card">
                        @if (!string.IsNullOrEmpty(Model.Kaizen.EmployeePhotoPath))
                        {
                            <img src="@Model.Kaizen.EmployeePhotoPath" alt="Employee Photo" class="employee-photo" />
                        }
                        else
                        {
                            <div class="employee-photo-placeholder">
                                <i class="fas fa-user"></i>
                            </div>
                        }
                        <div class="employee-info">
                            <h6>@Model.Kaizen.EmployeeName</h6>
                            <p><i class="fas fa-id-badge me-1"></i>@Model.Kaizen.EmployeeNo</p>
                            <p><i class="fas fa-building me-1"></i>@Model.Kaizen.Department</p>
                        </div>
                    </div>
                </div>

                <!-- Kaizen Details -->
                <div class="info-section">
                    <h5><i class="fas fa-lightbulb me-2"></i>Suggestion Details</h5>
                    <div class="info-grid">
                        <div class="info-item">
                            <div class="info-label">Category</div>
                            <div class="info-value">@Model.Kaizen.Category</div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">Date Implemented</div>
                            <div class="info-value">
                                @(Model.Kaizen.DateImplemented?.ToString("MMMM dd, yyyy") ?? "Not implemented yet")
                            </div>
                        </div>
                    </div>
                    <div class="mt-3">
                        <div class="info-label">Suggestion Description</div>
                        <div class="info-value" style="background: white; padding: 1rem; border-radius: 8px; border: 1px solid #e9ecef; min-height: 100px;">
                            @Model.Kaizen.SuggestionDescription
                        </div>
                    </div>
                </div>

                <!-- Cost Saving Information -->
                @if (Model.Kaizen.CostSaving.HasValue && Model.Kaizen.CostSaving > 0)
                {
                    <div class="cost-saving-card">
                        <h5><i class="fas fa-coins me-2"></i>Cost Saving Information</h5>
                        <div class="cost-saving-amount">$@Model.Kaizen.CostSaving.Value.ToString("N2")</div>
                        <p class="mb-0">Annual cost saving</p>
                        @if (Model.Kaizen.DollarRate.HasValue)
                        {
                            <small>Dollar Rate: $@Model.Kaizen.DollarRate.Value.ToString("N2")</small>
                        }
                    </div>
                }

                <!-- Other Benefits -->
                @if (!string.IsNullOrEmpty(Model.Kaizen.OtherBenefits))
                {
                    <div class="info-section">
                        <h5><i class="fas fa-star me-2"></i>Other Benefits</h5>
                        <div class="info-value" style="background: white; padding: 1rem; border-radius: 8px; border: 1px solid #e9ecef;">
                            @Model.Kaizen.OtherBenefits
                        </div>
                    </div>
                }

                <!-- Images Section -->
                <div class="info-section">
                    <h5><i class="fas fa-images me-2"></i>Before & After Images</h5>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="image-section">
                                <h6 class="text-center mb-3">Before Kaizen</h6>
                                @if (!string.IsNullOrEmpty(Model.Kaizen.BeforeKaizenImagePath))
                                {
                                    <div class="image-container">
                                        <img src="@Model.Kaizen.BeforeKaizenImagePath" alt="Before Kaizen" class="kaizen-image" />
                                    </div>
                                }
                                else
                                {
                                    <div class="no-data">
                                        <i class="fas fa-image"></i>
                                        <p>No before image available</p>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="image-section">
                                <h6 class="text-center mb-3">After Kaizen</h6>
                                @if (!string.IsNullOrEmpty(Model.Kaizen.AfterKaizenImagePath))
                                {
                                    <div class="image-container">
                                        <img src="@Model.Kaizen.AfterKaizenImagePath" alt="After Kaizen" class="kaizen-image" />
                                    </div>
                                }
                                else
                                {
                                    <div class="no-data">
                                        <i class="fas fa-image"></i>
                                        <p>No after image available</p>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Executive/Engineer Review Section -->
                @if (!string.IsNullOrEmpty(Model.Kaizen.Comments) || !string.IsNullOrEmpty(Model.Kaizen.EngineerApprovedBy))
                {
                    <div class="info-section">
                        <h5><i class="fas fa-user-tie me-2"></i>Engineer Review</h5>
                        <div class="info-grid">
                            @if (!string.IsNullOrEmpty(Model.Kaizen.EngineerApprovedBy))
                            {
                                <div class="info-item">
                                    <div class="info-label">Reviewed By</div>
                                    <div class="info-value">@Model.Kaizen.EngineerApprovedBy</div>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(Model.Kaizen.CanImplementInOtherFields))
                            {
                                <div class="info-item">
                                    <div class="info-label">Can be implemented in other fields</div>
                                    <div class="info-value">@Model.Kaizen.CanImplementInOtherFields</div>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(Model.Kaizen.ImplementationArea))
                            {
                                <div class="info-item">
                                    <div class="info-label">Implementation Area</div>
                                    <div class="info-value">@Model.Kaizen.ImplementationArea</div>
                                </div>
                            }
                        </div>
                        @if (!string.IsNullOrEmpty(Model.Kaizen.Comments))
                        {
                            <div class="mt-3">
                                <div class="info-label">Comments & Recommendations</div>
                                <div class="info-value" style="background: white; padding: 1rem; border-radius: 8px; border: 1px solid #e9ecef; min-height: 100px;">
                                    @Model.Kaizen.Comments
                                </div>
                            </div>
                        }
                    </div>
                }

                <!-- Manager Review Section -->
                @if (!string.IsNullOrEmpty(Model.Kaizen.ManagerComments) || !string.IsNullOrEmpty(Model.Kaizen.ManagerApprovedBy))
                {
                    <div class="info-section">
                        <h5><i class="fas fa-user-cog me-2"></i>Manager Review</h5>
                        <div class="info-grid">
                            @if (!string.IsNullOrEmpty(Model.Kaizen.ManagerApprovedBy))
                            {
                                <div class="info-item">
                                    <div class="info-label">Reviewed By</div>
                                    <div class="info-value">@Model.Kaizen.ManagerApprovedBy</div>
                                </div>
                            }
                        </div>
                        @if (!string.IsNullOrEmpty(Model.Kaizen.ManagerComments))
                        {
                            <div class="mt-3">
                                <div class="info-label">Manager Comments & Recommendations</div>
                                <div class="info-value" style="background: white; padding: 1rem; border-radius: 8px; border: 1px solid #e9ecef; min-height: 100px;">
                                    @Model.Kaizen.ManagerComments
                                </div>
                            </div>
                        }
                    </div>
                }

                <!-- Award Information -->
                <div class="info-section">
                    <h5><i class="fas fa-trophy me-2"></i>Award Information</h5>
                    @if (Model.ExistingScores.Any())
                    {
                        <!-- Dynamic Award Status Based on Score -->
                        <div class="info-grid">
                            <div class="info-item">
                                <div class="info-label">Award Status</div>
                                <div class="info-value">
                                    @if (Model.TotalWeight > 0)
                                    {
                                        <span class="badge @Model.AwardClass fs-6">
                                            <i class="fas fa-trophy me-1"></i>
                                            @Model.AwardName
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary fs-6">
                                            <i class="fas fa-minus me-1"></i>
                                            No Award
                                        </span>
                                    }
                                </div>
                            </div>
                            @if (Model.TotalWeight > 0)
                            {
                                <div class="info-item">
                                    <div class="info-label">Score</div>
                                    <div class="info-value">@Model.TotalScore / @Model.TotalWeight</div>
                                </div>
                                <div class="info-item">
                                    <div class="info-label">Percentage</div>
                                    <div class="info-value">
                                        <span class="@(Model.Percentage >= 90 ? "text-success" : Model.Percentage >= 70 ? "text-warning" : "text-danger") fw-bold">
                                            @Model.Percentage.ToString("F1")%
                                        </span>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="no-data">
                            <i class="fas fa-clipboard-list"></i>
                            <p>No scores available - Award cannot be determined</p>
                        </div>
                    }
                </div>

                <!-- Action Buttons -->
                <div class="action-buttons">
                    <a href="@Url.Action("SupervisorKaizenList", "Kaizen")" class="btn-kaizen btn-back">
                        <i class="fas fa-arrow-left"></i>
                        Back to List
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Edit Modal -->
<div class="modal fade" id="editKaizenModal" tabindex="-1" aria-labelledby="editKaizenModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editKaizenModalLabel">
                    <i class="fas fa-edit me-2"></i>Edit Kaizen Suggestion
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editKaizenForm" enctype="multipart/form-data">
                    <input type="hidden" id="editKaizenId" name="Id" />

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="editDateSubmitted" class="form-label">
                                <i class="fas fa-calendar me-2"></i>Date Submitted
                            </label>
                            <input type="date" id="editDateSubmitted" name="DateSubmitted" class="form-control" required />
                        </div>
                        <div class="col-md-6">
                            <label for="editDateImplemented" class="form-label">
                                <i class="fas fa-calendar-check me-2"></i>Date Implemented
                            </label>
                            <input type="date" id="editDateImplemented" name="DateImplemented" class="form-control" />
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="editKaizenNo" class="form-label">
                                <i class="fas fa-hashtag me-2"></i>Kaizen No
                            </label>
                            <input type="text" id="editKaizenNo" name="KaizenNo" class="form-control" readonly />
                        </div>
                        <div class="col-md-6">
                            <label for="editDepartment" class="form-label">
                                <i class="fas fa-building me-2"></i>Department Name
                            </label>
                            <input type="text" id="editDepartment" name="Department" class="form-control" required />
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="editEmployeeName" class="form-label">
                                <i class="fas fa-user me-2"></i>Employee Name
                            </label>
                            <input type="text" id="editEmployeeName" name="EmployeeName" class="form-control" required />
                        </div>
                        <div class="col-md-6">
                            <label for="editEmployeeNo" class="form-label">
                                <i class="fas fa-id-badge me-2"></i>Employee No
                            </label>
                            <input type="text" id="editEmployeeNo" name="EmployeeNo" class="form-control" required />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="editSuggestionDescription" class="form-label">
                            <i class="fas fa-lightbulb me-2"></i>Kaizen Suggestion Description
                        </label>
                        <textarea id="editSuggestionDescription" name="SuggestionDescription" class="form-control" rows="3" required></textarea>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="editBeforeKaizenImage" class="form-label">
                                <i class="fas fa-image me-2"></i>Before Kaizen Image
                            </label>
                            <input type="file" id="editBeforeKaizenImage" name="BeforeKaizenImage" class="form-control" accept="image/*" />
                        </div>
                        <div class="col-md-6">
                            <label for="editAfterKaizenImage" class="form-label">
                                <i class="fas fa-image me-2"></i>After Kaizen Image
                            </label>
                            <input type="file" id="editAfterKaizenImage" name="AfterKaizenImage" class="form-control" accept="image/*" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="editOtherBenefits" class="form-label">
                            <i class="fas fa-star me-2"></i>Other Benefits
                        </label>
                        <textarea id="editOtherBenefits" name="OtherBenefits" class="form-control" rows="2"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Cancel
                </button>
                <button type="button" class="btn btn-primary" onclick="saveKaizenEdit()">
                    <i class="fas fa-save me-2"></i>Save Changes
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Enhanced Edit Modal -->
<div class="modal fade" id="enhancedEditModal" tabindex="-1" aria-labelledby="enhancedEditModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="enhancedEditModalLabel">
                    <i class="fas fa-user-tie me-2"></i>Executive/Engineer Review
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="enhancedEditForm" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="enhancedEditKaizenId" name="Id" />

                    <!-- Hidden required fields -->
                    <input type="hidden" id="enhancedEditKaizenNoHidden" name="KaizenNo" />
                    <input type="hidden" id="enhancedEditEmployeeNoHidden" name="EmployeeNo" />
                    <input type="hidden" id="enhancedEditEmployeeNameHidden" name="EmployeeName" />
                    <input type="hidden" id="enhancedEditSuggestionDescriptionHidden" name="SuggestionDescription" />
                    <input type="hidden" id="enhancedEditDateSubmittedHidden" name="DateSubmitted" />

                    <!-- Executive/Engineer Form Section -->
                    <div class="mb-4" style="border: 1px solid #dee2e6; border-radius: 8px; padding: 20px; background-color: #f8f9fa;">
                        <h6 class="mb-3">
                            <i class="fas fa-user-tie me-2"></i>Executive/Engineer Review
                        </h6>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="enhancedEditCategory" class="form-label">
                                    <i class="fas fa-folder me-2"></i>Recommended Categories
                                </label>
                                <div class="mt-2" id="dynamicCategoriesContainer">
                                    <!-- Categories will be loaded dynamically from database -->
                                    <div class="text-center">
                                        <i class="fas fa-spinner fa-spin"></i> Loading categories...
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <label for="enhancedEditApprovedBy" class="form-label">
                                    <i class="fas fa-signature me-2"></i>Signature (Add Name)
                                </label>
                                <input type="text" id="enhancedEditApprovedBy" name="ApprovedBy" class="form-control" placeholder="Enter your name" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="enhancedEditComments" class="form-label">
                                <i class="fas fa-comments me-2"></i>Comment & Recommendations
                            </label>
                            <textarea id="enhancedEditComments" name="Comments" class="form-control" rows="4" placeholder="Enter your comments and recommendations..."></textarea>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">
                                <i class="fas fa-question-circle me-2"></i>Can this suggestion be implemented in other fields?
                            </label>
                            <div class="mt-2">
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="CanImplementInOtherFields" id="enhanced_implementYes" value="Yes" onchange="toggleEnhancedImplementationArea()">
                                    <label class="form-check-label" for="enhanced_implementYes">Yes</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="CanImplementInOtherFields" id="enhanced_implementNo" value="No" onchange="toggleEnhancedImplementationArea()">
                                    <label class="form-check-label" for="enhanced_implementNo">No</label>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3" id="implementationAreaField" style="display: none;">
                            <label for="enhancedEditImplementationArea" class="form-label">
                                <i class="fas fa-map-marker-alt me-2"></i>Specify Area
                            </label>
                            <input type="text" id="enhancedEditImplementationArea" name="ImplementationArea" class="form-control" placeholder="Type departments separated by commas (e.g., HR, IT, Admin)" />
                            <div id="suggestionsContainer" class="suggestions-container" style="display: none;"></div>
                            <small class="form-text text-muted">Type department names and separate multiple departments with commas</small>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Cancel
                </button>
                <button type="button" class="btn btn-warning" onclick="saveExecutiveFilling()">
                    <i class="fas fa-save me-2"></i>Save Executive Review
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Approval Popup Modal -->
<div class="modal fade" id="approvalModal" tabindex="-1" aria-labelledby="approvalModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="approvalModalLabel">
                    <i class="fas fa-gavel me-2"></i>Kaizen Approval
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <div class="mb-4">
                    <i class="fas fa-question-circle fa-3x text-primary mb-3"></i>
                    <h5>What would you like to do with this Kaizen suggestion?</h5>
                    <p class="text-muted">Please select your decision below</p>
                </div>
                <div class="d-flex justify-content-center gap-3">
                    <button type="button" class="btn btn-success btn-lg" onclick="showNameInput('approve')">
                        <i class="fas fa-check me-2"></i>Approve
                    </button>
                    <button type="button" class="btn btn-danger btn-lg" onclick="showNameInput('reject')">
                        <i class="fas fa-times me-2"></i>Reject
                    </button>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Cancel
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Name Input Modal -->
<div class="modal fade" id="nameInputModal" tabindex="-1" aria-labelledby="nameInputModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="nameInputModalLabel">
                    <i class="fas fa-user me-2"></i>Enter Your Name
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="userNameInput" class="form-label">
                        <i class="fas fa-signature me-2"></i>Your Name
                    </label>
                    <input type="text" id="userNameInput" class="form-control" placeholder="Enter your full name" required />
                    <div class="invalid-feedback">
                        Please enter your name.
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Cancel
                </button>
                <button type="button" class="btn btn-primary" id="confirmActionBtn" onclick="confirmAction()">
                    <i class="fas fa-check me-2"></i>Confirm
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}

<script>
    let currentKaizenId = null;

         // Load departments for autocomplete
     let departmentsLoaded = false;
     let allDepartments = [];

     function loadDepartments() {
         if (departmentsLoaded) return;

         fetch('/Kaizen/GetDepartments')
             .then(response => response.json())
             .then(data => {
                 if (data.success) {
                     allDepartments = data.departments;
                     departmentsLoaded = true;

                     // Initialize autocomplete for the input field
                     initializeAutocomplete();
                 } else {
                     console.error('Error loading departments:', data.message);
                 }
             })
             .catch(error => {
                 console.error('Error loading departments:', error);
             });
     }

     // Load categories from database
     function loadCategories() {
         fetch('/Kaizen/GetCategories')
             .then(response => response.json())
             .then(data => {
                 if (data.success) {
                     const container = document.getElementById('dynamicCategoriesContainer');
                     container.innerHTML = '';

                     data.categories.forEach(category => {
                         const categoryDiv = document.createElement('div');
                         categoryDiv.className = 'form-check form-check-inline';
                         categoryDiv.innerHTML = `
                             <input class="form-check-input category-checkbox" type="checkbox" name="Category"
                                    id="enhanced_category_${category.id}" value="${category.name}">
                             <label class="form-check-label" for="enhanced_category_${category.id}">${category.name}</label>
                         `;
                         container.appendChild(categoryDiv);
                     });
                 } else {
                     console.error('Failed to load categories:', data.message);
                     const container = document.getElementById('dynamicCategoriesContainer');
                     container.innerHTML = '<div class="text-danger">Failed to load categories</div>';
                 }
             })
             .catch(error => {
                 console.error('Error loading categories:', error);
                 const container = document.getElementById('dynamicCategoriesContainer');
                 container.innerHTML = '<div class="text-danger">Error loading categories</div>';
             });
     }

         // Load departments when page loads
     document.addEventListener('DOMContentLoaded', function() {
         loadDepartments();
         loadCategories();
     });

     function initializeAutocomplete() {
         const input = document.getElementById('enhancedEditImplementationArea');
         const suggestionsContainer = document.getElementById('suggestionsContainer');

         if (!input || !suggestionsContainer) return;

         let selectedIndex = -1;

         input.addEventListener('input', function() {
             const value = this.value;
             const cursorPosition = this.selectionStart;

             // Get the current word being typed (before the cursor)
             const beforeCursor = value.substring(0, cursorPosition);
             const words = beforeCursor.split(',').map(word => word.trim());
             const currentWord = words[words.length - 1];

             if (currentWord.length >= 1) {
                 // Filter departments that match the current word
                 const suggestions = allDepartments.filter(dept =>
                     dept.toLowerCase().includes(currentWord.toLowerCase()) &&
                     !words.slice(0, -1).includes(dept) // Don't suggest already selected departments
                 );

                 if (suggestions.length > 0) {
                     showSuggestions(suggestions, currentWord);
                 } else {
                     hideSuggestions();
                 }
             } else {
                 hideSuggestions();
             }
         });

         input.addEventListener('keydown', function(e) {
             const suggestions = suggestionsContainer.querySelectorAll('.suggestion-item');

             if (e.key === 'ArrowDown') {
                 e.preventDefault();
                 selectedIndex = Math.min(selectedIndex + 1, suggestions.length - 1);
                 updateSelectedSuggestion(suggestions);
             } else if (e.key === 'ArrowUp') {
                 e.preventDefault();
                 selectedIndex = Math.max(selectedIndex - 1, -1);
                 updateSelectedSuggestion(suggestions);
             } else if (e.key === 'Enter' && selectedIndex >= 0) {
                 e.preventDefault();
                 selectSuggestion(suggestions[selectedIndex]);
             } else if (e.key === 'Escape') {
                 hideSuggestions();
                 selectedIndex = -1;
             }
         });

         // Hide suggestions when clicking outside
         document.addEventListener('click', function(e) {
             if (!input.contains(e.target) && !suggestionsContainer.contains(e.target)) {
                 hideSuggestions();
                 selectedIndex = -1;
             }
         });
     }

     function showSuggestions(suggestions, currentWord) {
         const suggestionsContainer = document.getElementById('suggestionsContainer');
         suggestionsContainer.innerHTML = '';

         suggestions.forEach(suggestion => {
             const item = document.createElement('div');
             item.className = 'suggestion-item';
             item.textContent = suggestion;

             item.addEventListener('click', function() {
                 selectSuggestion(this);
             });

             suggestionsContainer.appendChild(item);
         });

         suggestionsContainer.style.display = 'block';
     }

     function hideSuggestions() {
         const suggestionsContainer = document.getElementById('suggestionsContainer');
         suggestionsContainer.style.display = 'none';
     }

     function updateSelectedSuggestion(suggestions) {
         suggestions.forEach((item, index) => {
             if (index === selectedIndex) {
                 item.classList.add('selected');
             } else {
                 item.classList.remove('selected');
             }
         });
     }

     function selectSuggestion(suggestionElement) {
         const input = document.getElementById('enhancedEditImplementationArea');
         const value = input.value;
         const cursorPosition = input.selectionStart;

         // Get the current word being typed (before the cursor)
         const beforeCursor = value.substring(0, cursorPosition);
         const afterCursor = value.substring(cursorPosition);
         const words = beforeCursor.split(',').map(word => word.trim());
         const currentWord = words[words.length - 1];

         // Replace the current word with the selected suggestion
         const newBeforeCursor = beforeCursor.substring(0, beforeCursor.lastIndexOf(currentWord)) + suggestionElement.textContent;
         const newValue = newBeforeCursor + afterCursor;

         input.value = newValue;

         // Position cursor after the selected suggestion
         const newCursorPosition = newBeforeCursor.length;
         input.setSelectionRange(newCursorPosition, newCursorPosition);

         hideSuggestions();

         // Trigger input event to update suggestions for the next word
         input.dispatchEvent(new Event('input'));
     }

    function editKaizen(id) {
        currentKaizenId = id;

        // Fetch kaizen data
        fetch(`/Kaizen/Edit/${id}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Populate form fields
                    document.getElementById('editKaizenId').value = data.data.id;
                    document.getElementById('editKaizenNo').value = data.data.kaizenNo;
                    document.getElementById('editDateSubmitted').value = data.data.dateSubmitted.split('T')[0];
                    document.getElementById('editDateImplemented').value = data.data.dateImplemented ? data.data.dateImplemented.split('T')[0] : '';
                    document.getElementById('editDepartment').value = data.data.department;
                    document.getElementById('editEmployeeName').value = data.data.employeeName;
                    document.getElementById('editEmployeeNo').value = data.data.employeeNo;
                    document.getElementById('editSuggestionDescription').value = data.data.suggestionDescription || '';
                    document.getElementById('editOtherBenefits').value = data.data.otherBenefits || '';

                    // Show modal
                    const modal = new bootstrap.Modal(document.getElementById('editKaizenModal'));
                    modal.show();
                } else {
                    showToast('Error: ' + data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('An error occurred while loading the kaizen data.', 'error');
            });
    }

    function saveKaizenEdit() {
        const form = document.getElementById('editKaizenForm');
        const formData = new FormData(form);
        const id = document.getElementById('editKaizenId').value;

        // Add antiforgery token
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        formData.append('__RequestVerificationToken', token);

        fetch(`/Kaizen/Edit/${id}`, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showSubmissionToast(data.message, 'success');
                bootstrap.Modal.getInstance(document.getElementById('editKaizenModal')).hide();
                // Reload the page to show updated data
                location.reload();
            } else {
                showToast('Error: ' + data.message, 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showToast('An error occurred while saving the changes.', 'error');
        });
    }

         function executiveFilling(id) {
         currentKaizenId = id;

         // Load departments if not already loaded
         loadDepartments();

         // Initialize autocomplete functionality
         initializeAutocomplete();

        // Fetch kaizen data for enhanced edit
        fetch(`/Kaizen/Edit/${id}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Populate form fields
                    document.getElementById('enhancedEditKaizenId').value = data.data.id;

                    // Populate hidden fields for form submission
                    document.getElementById('enhancedEditKaizenNoHidden').value = data.data.kaizenNo || '';
                    document.getElementById('enhancedEditEmployeeNoHidden').value = data.data.employeeNo || '';
                    document.getElementById('enhancedEditEmployeeNameHidden').value = data.data.employeeName || '';
                    document.getElementById('enhancedEditSuggestionDescriptionHidden').value = data.data.suggestionDescription || '';
                    document.getElementById('enhancedEditDateSubmittedHidden').value = data.data.dateSubmitted || '';

                    // Set category checkboxes
                    const category = data.data.category || '';
                    if (category) {
                        const categories = category.split(',').map(cat => cat.trim());
                        categories.forEach(cat => {
                            const checkbox = document.querySelector(`#enhancedEditModal input[name="Category"][value="${cat}"]`);
                            if (checkbox) {
                                checkbox.checked = true;
                            }
                        });
                    }

                    // Set other fields
                    document.getElementById('enhancedEditApprovedBy').value = data.data.engineerApprovedBy || '';
                    document.getElementById('enhancedEditComments').value = data.data.comments || '';

                                         // Set implementation area fields
                     const canImplement = data.data.canImplementInOtherFields || '';
                     if (canImplement === 'Yes') {
                         document.getElementById('enhanced_implementYes').checked = true;
                         document.getElementById('implementationAreaField').style.display = 'block';

                         // Set the implementation area text input
                         const implementationArea = data.data.implementationArea || '';
                         document.getElementById('enhancedEditImplementationArea').value = implementationArea;
                     } else if (canImplement === 'No') {
                         document.getElementById('enhanced_implementNo').checked = true;
                         document.getElementById('implementationAreaField').style.display = 'none';
                     }

                    // Show modal
                    const modal = new bootstrap.Modal(document.getElementById('enhancedEditModal'));
                    modal.show();
                } else {
                    showToast('Error: ' + data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('An error occurred while loading the kaizen data.', 'error');
            });
    }

    function saveExecutiveFilling() {
        const kaizenId = document.getElementById('enhancedEditKaizenId').value;

        // Validate form
        const approvedBy = document.getElementById('enhancedEditApprovedBy').value.trim();
        const comments = document.getElementById('enhancedEditComments').value.trim();
        const canImplementInOtherFields = document.querySelector('input[name="CanImplementInOtherFields"]:checked')?.value;
        const selectedCategories = document.querySelectorAll('#enhancedEditModal input[name="Category"]:checked');

        if (!approvedBy) {
            showToast('Please enter your name for signature.', 'error');
            document.getElementById('enhancedEditApprovedBy').focus();
            return;
        }

        if (!comments) {
            showToast('Please provide comments and recommendations.', 'error');
            document.getElementById('enhancedEditComments').focus();
            return;
        }

        if (selectedCategories.length === 0) {
            showToast('Please select at least one recommended category.', 'error');
            return;
        }

        if (!canImplementInOtherFields) {
            showToast('Please select whether this suggestion can be implemented in other fields.', 'error');
            return;
        }

        // Show loading state
        const saveBtn = document.querySelector('#enhancedEditModal .btn-warning');
        const originalText = saveBtn.innerHTML;
        saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Saving...';
        saveBtn.disabled = true;

        // Prepare form data
        const formData = new FormData();

        const categoryCheckboxes = document.querySelectorAll('#enhancedEditModal input[name="Category"]:checked');
        categoryCheckboxes.forEach(checkbox => {
            formData.append('Category', checkbox.value);
        });

        formData.append('ApprovedBy', approvedBy);
        formData.append('Comments', comments);
        formData.append('CanImplementInOtherFields', canImplementInOtherFields);

                 if (canImplementInOtherFields === 'Yes') {
             const implementationArea = document.getElementById('enhancedEditImplementationArea').value.trim();
             formData.append('ImplementationArea', implementationArea);
         }

        formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

        // Send the data to the server
        fetch(`/Kaizen/SaveExecutiveFilling/${kaizenId}`, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                                    showSubmissionToast('Executive review saved successfully!', 'success');
                bootstrap.Modal.getInstance(document.getElementById('enhancedEditModal')).hide();
                location.reload();
            } else {
                showToast('Error: ' + data.message, 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showToast('An error occurred while saving the executive review.', 'error');
        })
        .finally(() => {
            saveBtn.innerHTML = originalText;
            saveBtn.disabled = false;
        });
    }

    function showApprovalPopup(id) {
        currentKaizenId = id;
        const modal = new bootstrap.Modal(document.getElementById('approvalModal'));
        modal.show();
    }

    function showNameInput(action) {
        document.getElementById('userNameInput').value = '';

        const modal = new bootstrap.Modal(document.getElementById('nameInputModal'));
        modal.show();

        document.getElementById('confirmActionBtn').onclick = function() {
            const name = document.getElementById('userNameInput').value.trim();
            if (name) {
                if (action === 'approve') {
                    approveKaizen(currentKaizenId, name);
                } else if (action === 'reject') {
                    rejectKaizen(currentKaizenId, name);
                }
                modal.hide();
            } else {
                showToast('Please enter your name to confirm the action.', 'error');
                document.getElementById('userNameInput').focus();
            }
        };
    }

    function confirmAction() {
        // Handled by onclick attribute
    }

    function approveKaizen(id, name) {
        if (!id) return;

        if (confirm(`Are you sure you want to approve this Kaizen suggestion?`)) {
            fetch(`/Kaizen/UpdateEngineerStatus/${id}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ engineerStatus: 'Approved', engineerApprovedBy: name })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showSubmissionToast('Kaizen suggestion approved successfully!', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('approvalModal')).hide();
                    location.reload();
                } else {
                    showToast('Error: ' + data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('An error occurred while approving the suggestion.', 'error');
            });
        }
    }

    function rejectKaizen(id, name) {
        if (!id) return;

        if (confirm(`Are you sure you want to reject this Kaizen suggestion?`)) {
            fetch(`/Kaizen/UpdateEngineerStatus/${id}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ engineerStatus: 'Rejected', engineerApprovedBy: name })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showSubmissionToast('Kaizen suggestion rejected successfully!', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('approvalModal')).hide();
                    location.reload();
                } else {
                    showToast('Error: ' + data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('An error occurred while rejecting the suggestion.', 'error');
            });
        }
    }

         function toggleEnhancedImplementationArea() {
         const implementYes = document.getElementById('enhanced_implementYes');
         const implementationAreaField = document.getElementById('implementationAreaField');
         const implementationAreaInput = document.getElementById('enhancedEditImplementationArea');

         if (implementYes.checked) {
             implementationAreaField.style.display = 'block';
         } else {
             implementationAreaField.style.display = 'none';
             // Clear the input field
             implementationAreaInput.value = '';
         }
     }
</script>
