@model KaizenWebApp.ViewModels.DepartmentTargetsPageViewModel
@using KaizenWebApp.Data
@inject AppDbContext _context
@{
    ViewData["Title"] = "Department Targets & Analytics (Read-Only)";
    Layout = "~/Views/Shared/_KaizenTeamLayout.cshtml";
}

<style>
    .targets-header {
        background: linear-gradient(135deg, #E31E24 0%, #c41e3a 100%);
        color: white;
        padding: 2rem 0;
        margin-bottom: 2rem;
        border-radius: 15px;
        box-shadow: 0 8px 25px rgba(227, 30, 36, 0.3);
    }

    .filter-section {
        background: white;
        border-radius: 15px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
        border: 1px solid rgba(0, 0, 0, 0.05);
    }

    .summary-cards {
        margin-bottom: 2rem;
    }

    .summary-card {
        background: white;
        border-radius: 15px;
        padding: 1.5rem;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
        border: 1px solid rgba(0, 0, 0, 0.05);
        text-align: center;
        transition: transform 0.3s ease;
    }

    .summary-card:hover {
        transform: translateY(-5px);
    }

    .summary-card.submitted {
        border-left: 5px solid #007bff;
    }

    .summary-card.cost-saving {
        border-left: 5px solid #17a2b8;
    }

    .summary-card.departments {
        border-left: 5px solid #28a745;
    }

    .summary-card.at-risk {
        border-left: 5px solid #dc3545;
    }

    .department-card {
        background: white;
        border-radius: 15px;
        padding: 1.5rem;
        margin-bottom: 1rem;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
        border: 1px solid rgba(0, 0, 0, 0.05);
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .department-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }

    .department-card.completed {
        border-left: 5px solid #28a745;
    }

    .department-card.on-track {
        border-left: 5px solid #17a2b8;
    }

    .department-card.behind {
        border-left: 5px solid #ffc107;
    }

    .department-card.at-risk {
        border-left: 5px solid #dc3545;
    }

    .progress-bar {
        height: 8px;
        border-radius: 4px;
        background-color: #e9ecef;
        overflow: hidden;
    }

    .progress-fill {
        height: 100%;
        border-radius: 4px;
        transition: width 0.3s ease;
    }

    .progress-fill.completed { background-color: #28a745; }
    .progress-fill.on-track { background-color: #17a2b8; }
    .progress-fill.behind { background-color: #ffc107; }
    .progress-fill.at-risk { background-color: #dc3545; }

    .chart-container {
        background: white;
        border-radius: 15px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
        border: 1px solid rgba(0, 0, 0, 0.05);
    }

    .modal-content {
        border-radius: 15px;
        border: none;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    }

    .modal-header {
        background: linear-gradient(135deg, #E31E24 0%, #c41e3a 100%);
        color: white;
        border-radius: 15px 15px 0 0;
        border: none;
    }

    .btn-target {
        background: linear-gradient(135deg, #E31E24 0%, #c41e3a 100%);
        border: none;
        color: white;
        font-weight: 600;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        transition: all 0.3s ease;
    }

    .btn-target:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(227, 30, 36, 0.4);
        color: white;
    }

    .status-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.875rem;
        font-weight: 600;
    }

    .status-completed { background-color: #d4edda; color: #155724; }
    .status-on-track { background-color: #d1ecf1; color: #0c5460; }
    .status-behind { background-color: #fff3cd; color: #856404; }
    .status-at-risk { background-color: #f8d7da; color: #721c24; }

    .read-only-indicator {
        background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        font-size: 0.875rem;
        font-weight: 600;
        margin-bottom: 1rem;
    }
</style>

<div class="container">
    <!-- Read-Only Indicator -->
    <div class="read-only-indicator text-center">
        <i class="fas fa-eye me-2"></i>Read-Only View - No modifications allowed
    </div>

    <!-- Filter Section -->
    <div class="filter-section">
        <form method="get" class="row align-items-end">
            <div class="col-md-3">
                <label for="year" class="form-label">Year</label>
                <select name="year" id="year" class="form-select" onchange="this.form.submit()">
                    @foreach (var year in Model.AvailableYears)
                    {
                        if (year == Model.SelectedYear)
                        {
                            <option value="@year" selected>@year</option>
                        }
                        else
                        {
                            <option value="@year">@year</option>
                        }
                    }
                </select>
            </div>
            <div class="col-md-3">
                <label for="month" class="form-label">Month</label>
                <select name="month" id="month" class="form-select" onchange="this.form.submit()">
                    @foreach (var month in Model.AvailableMonths)
                    {
                        if (month == Model.SelectedMonth)
                        {
                            <option value="@month" selected>
                                @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month)
                            </option>
                        }
                        else
                        {
                            <option value="@month">
                                @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month)
                            </option>
                        }
                    }
                </select>
            </div>
            <div class="col-md-3">
                <label for="statusFilter" class="form-label">Risk Status</label>
                <select name="statusFilter" id="statusFilter" class="form-select">
                    <option value="">All Departments</option>
                    @{
                        var selectedStatusFilter = Context.Request.Query["statusFilter"].ToString();
                    }
                    @if (selectedStatusFilter == "At Risk")
                    {
                        <option value="At Risk" selected>At Risk</option>
                    }
                    else
                    {
                        <option value="At Risk">At Risk</option>
                    }
                    @if (selectedStatusFilter == "Safe")
                    {
                        <option value="Safe" selected>Safe</option>
                    }
                    else
                    {
                        <option value="Safe">Safe</option>
                    }
                </select>
            </div>
            <div class="col-md-3 text-end">
                <button type="submit" class="btn btn-target">
                    <i class="fas fa-filter me-2"></i>Apply Filter
                </button>
            </div>
        </form>
    </div>

    <!-- Summary Cards -->
    <div class="row summary-cards">
        <div class="col-md-3">
            <div class="summary-card submitted">
                <h3 class="text-primary mb-2">@ViewBag.MostSubmittedCount</h3>
                <p class="text-muted mb-0">@ViewBag.MostSubmittedDepartment</p>
                <small class="text-muted">Most Submitted</small>
            </div>
        </div>
        <div class="col-md-3">
            <div class="summary-card cost-saving">
                <h3 class="text-info mb-2">$@ViewBag.MostCostSavingKaizenAmount.ToString("N0")</h3>
                <p class="text-muted mb-0">@ViewBag.MostCostSavingKaizenNo</p>
                <small class="text-muted">Best Cost Saving</small>
            </div>
        </div>
        <div class="col-md-3">
            <div class="summary-card departments">
                <h3 class="text-success mb-2">@Model.DepartmentTargets.Count</h3>
                <p class="text-muted mb-0">Total Departments</p>
                <small class="text-muted">Active Departments</small>
            </div>
        </div>
        <div class="col-md-3">
            <div class="summary-card at-risk">
                <h3 class="text-danger mb-2">@Model.DepartmentTargets.Count(d => d.Status == "At Risk")</h3>
                <p class="text-muted mb-0">Departments</p>
                <small class="text-muted">At Risk</small>
            </div>
        </div>
    </div>

    <!-- Department List -->
    <div class="chart-container">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h4 class="mb-0">
                <i class="fas fa-list me-2"></i>
                Department Details (Read-Only)
            </h4>
            <div class="text-muted">
                <i class="fas fa-info-circle me-1"></i>
                View only - No target setting allowed
            </div>
        </div>
        
        @if (!Model.DepartmentTargets.Any())
        {
            <div class="text-center py-5">
                <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                <h5 class="text-muted">No departments found</h5>
                <p class="text-muted">No kaizen submissions found for the selected period.</p>
            </div>
        }
        else
        {
            <div class="row">
                @foreach (var dept in Model.DepartmentTargets)
                {
                    <div class="col-md-6 col-lg-4 mb-3">
                        <div class="department-card @dept.Status.ToLower().Replace(" ", "-")" 
                             onclick="showDepartmentDetails('@dept.Department', @dept.TargetCount, @dept.AchievedCount, @dept.AchievementPercentage)">
                            <div class="d-flex justify-content-between align-items-start mb-3">
                                <h6 class="mb-0">@dept.Department</h6>
                                <span class="status-badge status-@dept.Status.ToLower().Replace(" ", "-")">
                                    @dept.Status
                                </span>
                            </div>
                            <div class="row text-center mb-3">
                                <div class="col-6">
                                    <h5 class="text-danger mb-1">@dept.TargetCount</h5>
                                    <small class="text-muted">Target</small>
                                </div>
                                <div class="col-6">
                                    <h5 class="text-success mb-1">@dept.AchievedCount</h5>
                                    <small class="text-muted">Achieved</small>
                                </div>
                            </div>
                            <div class="progress-bar">
                                <div class="progress-fill @dept.Status.ToLower().Replace(" ", "-")" 
                                     style="width: @(Math.Min(dept.AchievementPercentage, 100))%"></div>
                            </div>
                            <div class="text-center mt-2">
                                <small class="text-muted">@dept.AchievementPercentage.ToString("F1")% Complete</small>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<!-- Department Details Modal (Read-Only) -->
<div class="modal fade" id="departmentDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-chart-bar me-2"></i>
                    <span id="deptName"></span> - Performance Details (Read-Only)
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="text-center">
                            <h3 id="deptTarget" class="text-danger"></h3>
                            <p class="text-muted">Target</p>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="text-center">
                            <h3 id="deptAchieved" class="text-success"></h3>
                            <p class="text-muted">Achieved</p>
                        </div>
                    </div>
                </div>
                <div class="text-center mt-4">
                    <h4 id="deptPercentage" class="text-warning"></h4>
                    <p class="text-muted">Achievement Percentage</p>
                </div>
                <div id="deptChart" style="height: 300px; margin-top: 2rem;"></div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Chart data
        const departmentData = @Html.Raw(Json.Serialize(Model.DepartmentTargets.Select(d => new { 
            Department = d.Department, 
            Target = d.TargetCount, 
            Achieved = d.AchievedCount,
            Percentage = d.AchievementPercentage
        })));

        function showDepartmentDetails(department, target, achieved, percentage) {
            document.getElementById('deptName').textContent = department;
            document.getElementById('deptTarget').textContent = target;
            document.getElementById('deptAchieved').textContent = achieved;
            document.getElementById('deptPercentage').textContent = percentage.toFixed(1) + '%';
            
            // Create department-specific chart
            const modalChartContainer = document.getElementById('deptChart');
            modalChartContainer.innerHTML = '<canvas id="deptDetailChart"></canvas>';
            
            const detailCtx = document.getElementById('deptDetailChart');
            new Chart(detailCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Achieved', 'Remaining'],
                    datasets: [{
                        data: [achieved, Math.max(0, target - achieved)],
                        backgroundColor: ['#28a745', '#e9ecef'],
                        borderWidth: 2,
                        borderColor: '#fff'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                        }
                    }
                }
            });
            
            new bootstrap.Modal(document.getElementById('departmentDetailsModal')).show();
        }
    </script>
} 