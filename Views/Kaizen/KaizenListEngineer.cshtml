@model IEnumerable<KaizenWebApp.Models.KaizenForm>

@{
    ViewData["Title"] = "Kaizen Suggestions Management";
    Layout = "~/Views/Shared/_EngineerLayout.cshtml";
}

<style>
    /* Admin card styling to match AwardTrackingManager */
    .admin-card {
        background: white;
        border-radius: 15px;
        padding: 2rem;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
        border: 1px solid rgba(0, 0, 0, 0.05);
    }

    /* Enhanced table styling */
    .table-hover tbody tr:hover {
        background-color: #f8f9fa;
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }

    /* Badge enhancements */
    .badge {
        font-weight: 600;
        padding: 0.5rem 0.75rem;
        border-radius: 20px;
    }

    /* Button group improvements */
    .btn-group .btn {
        margin-right: 0.25rem;
        border-radius: 6px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .btn-group .btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    }

    /* Executive button styling */
    .btn-executive {
        background: linear-gradient(135deg, #6f42c1 0%, #8e44ad 100%);
        color: white;
        border: none;
    }

    .btn-executive:hover {
        background: linear-gradient(135deg, #5a32a3 0%, #7d3c98 100%);
        color: white;
    }

    /* Employee photo styling */
    .rounded-circle {
        border: 2px solid #e9ecef;
        transition: all 0.3s ease;
    }

    .rounded-circle:hover {
        border-color: #6c757d;
        transform: scale(1.05);
    }

    /* Cost saving styling */
    .text-success.fw-bold {
        font-size: 0.95rem;
    }

    /* Status badge icons */
    .badge i {
        font-size: 0.8rem;
    }

    /* Table column styling */
    .table th:last-child,
    .table td:last-child {
        white-space: nowrap;
        min-width: 200px;
    }

    .table th:nth-child(2),
    .table td:nth-child(2) {
        word-wrap: break-word;
        max-width: 120px;
    }

    /* Responsive table adjustments */
    @@media (max-width: 768px) {
        .table th:nth-child(2),
        .table td:nth-child(2) {
            max-width: 80px;
            font-size: 0.9rem;
        }
    }

    /* Suggestions container styles */
    .suggestions-container {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 1px solid #dee2e6;
        border-top: none;
        border-radius: 0 0 4px 4px;
        max-height: 200px;
        overflow-y: auto;
        z-index: 1000;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .suggestion-item {
        padding: 8px 12px;
        cursor: pointer;
        border-bottom: 1px solid #f8f9fa;
        transition: background-color 0.2s ease;
    }

    .suggestion-item:hover {
        background-color: #f8f9fa;
    }

    .suggestion-item.selected {
        background-color: #007bff;
        color: white;
    }

    .suggestion-item:last-child {
        border-bottom: none;
    }

    /* Position the input field container relatively for absolute positioning of suggestions */
    #implementationAreaField {
        position: relative;
    }


</style>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
                        <div class="admin-card">
                
                <!-- Search Section -->
                <div class="card mb-4">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">
                            <i class="fas fa-search me-2"></i>
                            Search & Filter
                        </h5>
                    </div>
                    <div class="card-body">
                        <form method="get" action="@Url.Action("KaizenListEngineer", "Kaizen")" id="searchForm">
                            <div class="row">
                                <div class="col-md-2">
                                    <div class="mb-3">
                                        <label for="startDate" class="form-label fw-bold">Start Date</label>
                                        <input type="date" class="form-control" id="startDate" name="startDate" 
                                               value="@Context.Request.Query["startDate"]">
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="mb-3">
                                        <label for="endDate" class="form-label fw-bold">End Date</label>
                                        <input type="date" class="form-control" id="endDate" name="endDate" 
                                               value="@Context.Request.Query["endDate"]">
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="mb-3">
                                        <label for="category" class="form-label fw-bold">Category</label>
                                        <select class="form-select" id="category" name="category">
                                            <option value="">All Categories</option>
                                            <option value="Cost reduction" selected="@(Context.Request.Query["category"].ToString() == "Cost reduction")">Major Cost reduction by innovation</option>
                                            <option value="Productivity Improvement" selected="@(Context.Request.Query["category"].ToString() == "Productivity Improvement")">Productivity Improvement</option>
                                            <option value="OHS Improvement" selected="@(Context.Request.Query["category"].ToString() == "OHS Improvement")">OHS Improvement</option>
                                            <option value="Quality Improvements" selected="@(Context.Request.Query["category"].ToString() == "Quality Improvements")">Quality Improvements</option>
                                            <option value="Environmental friendly" selected="@(Context.Request.Query["category"].ToString() == "Environmental friendly")">Environmental friendly Innovation</option>
                                            <option value="5S Improvement" selected="@(Context.Request.Query["category"].ToString() == "5S Improvement")">5S Improvement</option>
                                            <option value="Ergonomics Improvements" selected="@(Context.Request.Query["category"].ToString() == "Ergonomics Improvements")">Ergonomics Improvements</option>
                                            <option value="Energy Saving Improvement" selected="@(Context.Request.Query["category"].ToString() == "Energy Saving Improvement")">Energy Saving Improvement</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="mb-3">
                                        <label for="engineerStatus" class="form-label fw-bold">Engineer Status</label>
                                        <select class="form-select" id="engineerStatus" name="engineerStatus">
                                            <option value="">All Status</option>
                                            <option value="Approved" selected="@(Context.Request.Query["engineerStatus"].ToString() == "Approved")">Approved</option>
                                            <option value="Rejected" selected="@(Context.Request.Query["engineerStatus"].ToString() == "Rejected")">Rejected</option>
                                            <option value="Pending" selected="@(Context.Request.Query["engineerStatus"].ToString() == "Pending")">Pending</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="mb-3">
                                        <label for="managerStatus" class="form-label fw-bold">Manager Status</label>
                                        <select class="form-select" id="managerStatus" name="managerStatus">
                                            <option value="">All Status</option>
                                            <option value="Approved" selected="@(Context.Request.Query["managerStatus"].ToString() == "Approved")">Approved</option>
                                            <option value="Rejected" selected="@(Context.Request.Query["managerStatus"].ToString() == "Rejected")">Rejected</option>
                                            <option value="Pending" selected="@(Context.Request.Query["managerStatus"].ToString() == "Pending")">Pending</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-8">
                                    <div class="mb-3">
                                        <label for="searchString" class="form-label fw-bold">Search</label>
                                        <input type="text" class="form-control" id="searchString" name="searchString" 
                                               placeholder="Search by Kaizen No, Employee Name, or Employee No..."
                                               value="@Context.Request.Query["searchString"]">
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label fw-bold">&nbsp;</label>
                                        <div class="d-flex gap-2">
                                            <button type="submit" class="btn btn-primary">
                                                <i class="fas fa-search me-2"></i>
                                                Search
                                            </button>
                                            <a href="@Url.Action("KaizenListEngineer", "Kaizen")" class="btn btn-outline-secondary">
                                                <i class="fas fa-times me-2"></i>
                                                Clear Filters
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>


                @if (!Model?.Any() ?? true)
                {
                    <div class="text-center py-5">
                        <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">No Kaizen Suggestions Found</h5>
                        <p class="text-muted">No kaizens match your current search criteria.</p>
                        <a href="@Url.Action("KaizenListEngineer", "Kaizen")" class="btn btn-manager">
                            <i class="fas fa-times me-2"></i>
                            Clear Filters
                        </a>
                    </div>
                }
                else
                {
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <div class="text-muted">
                            <i class="fas fa-list me-2"></i>
                            Showing @Model.Count() kaizen suggestion(s)
                        </div>
                        @if (!string.IsNullOrEmpty(Context.Request.Query["startDate"]) || 
                              !string.IsNullOrEmpty(Context.Request.Query["endDate"]) || 
                              !string.IsNullOrEmpty(Context.Request.Query["category"]) ||
                              !string.IsNullOrEmpty(Context.Request.Query["engineerStatus"]) ||
                              !string.IsNullOrEmpty(Context.Request.Query["managerStatus"]) ||
                              !string.IsNullOrEmpty(Context.Request.Query["searchString"]))
                        {
                            <div class="text-muted small">
                                <i class="fas fa-filter me-1"></i>
                                Filters applied
                            </div>
                        }
                    </div>
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>Date Submitted</th>
                                    <th>Kaizen No</th>
                                    <th>Employee</th>
                                    <th>Cost Saving</th>
                                    <th>Engineer Status</th>
                                    <th>Manager Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model)
                                {
                                    <tr>
                                        <td>
                                            <small>@item.DateSubmitted.ToString("MMM dd, yyyy")</small>
                                        </td>
                                        <td>
                                            <strong>@Html.DisplayFor(modelItem => item.KaizenNo)</strong>
                                        </td>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                @if (!string.IsNullOrEmpty(item.EmployeePhotoPath))
                                                {
                                                    <img src="@item.EmployeePhotoPath" 
                                                         alt="Employee Photo" 
                                                         class="rounded-circle me-2" 
                                                         style="width: 30px; height: 30px; object-fit: cover;">
                                                }
                                                else
                                                {
                                                    <div class="bg-secondary rounded-circle d-flex align-items-center justify-content-center me-2" 
                                                         style="width: 30px; height: 30px;">
                                                        <i class="fas fa-user text-white" style="font-size: 12px;"></i>
                                                    </div>
                                                }
                                                <div>
                                                    <div class="fw-bold">@Html.DisplayFor(modelItem => item.EmployeeName)</div>
                                                    <small class="text-muted">@Html.DisplayFor(modelItem => item.EmployeeNo)</small>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            @if (item.CostSaving.HasValue && item.CostSaving > 0)
                                            {
                                                <span class="text-success fw-bold">
                                                    $@item.CostSaving.Value.ToString("N2")
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">No cost saving</span>
                                            }
                                        </td>
                                        <td>
                                            @{
                                                var engineerStatus = item.EngineerStatus ?? "Pending";
                                                var statusClass = engineerStatus switch
                                                {
                                                    "Approved" => "badge bg-success",
                                                    "Rejected" => "badge bg-danger",
                                                    _ => "badge bg-warning text-dark"
                                                };
                                            }
                                            <span class="@statusClass">
                                                <i class="fas fa-@(engineerStatus == "Approved" ? "check" : engineerStatus == "Rejected" ? "times" : "clock") me-1"></i>
                                                @engineerStatus
                                            </span>
                                        </td>
                                        <td>
                                            @{
                                                var currentEngineerStatus = item.EngineerStatus ?? "Pending";
                                                string managerStatusDisplay;
                                                string managerStatusClass;
                                                
                                                if (currentEngineerStatus == "Rejected")
                                                {
                                                    managerStatusDisplay = null;
                                                    managerStatusClass = "text-muted";
                                                }
                                                else
                                                {
                                                    var managerStatus = item.ManagerStatus ?? "Pending";
                                                    managerStatusDisplay = managerStatus;
                                                    managerStatusClass = managerStatus switch
                                                    {
                                                        "Approved" => "badge bg-success",
                                                        "Rejected" => "badge bg-danger",
                                                        _ => "badge bg-warning text-dark"
                                                    };
                                                }
                                            }
                                            @if (currentEngineerStatus == "Rejected")
                                            {
                                                <span class="@managerStatusClass">-</span>
                                            }
                                            else
                                            {
                                                <span class="@managerStatusClass">
                                                    <i class="fas fa-@(managerStatusDisplay == "Approved" ? "check" : managerStatusDisplay == "Rejected" ? "times" : "clock") me-1"></i>
                                                    @managerStatusDisplay
                                                </span>
                                            }
                                        </td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <a href="@Url.Action("KaizenDetailsEngineer", "Kaizen", new { id = item.Id })" 
                                                   class="btn btn-sm btn-outline-primary">
                                                    <i class="fas fa-eye me-1"></i>
                                                    View Details
                                                </a>
                                                @if (((item.EngineerStatus ?? "Pending") == "Approved" || (item.EngineerStatus ?? "Pending") == "Rejected") && 
                                                     (string.IsNullOrEmpty(item.Category) && string.IsNullOrEmpty(item.Comments) && string.IsNullOrEmpty(item.CanImplementInOtherFields)))
                                                {
                                                    <button class="btn btn-sm btn-executive" onclick="executiveFilling(@item.Id)">
                                                        <i class="fas fa-user-tie me-1"></i>Add Review
                                                    </button>
                                                }
                                                @if ((item.EngineerStatus ?? "Pending") == "Pending")
                                                {
                                                    <button class="btn btn-sm btn-warning" onclick="showApprovalPopup(@item.Id)">
                                                        <i class="fas fa-gavel me-1"></i>Approval
                                                    </button>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    </div>

<!-- Edit Modal -->
<div class="modal fade" id="editKaizenModal" tabindex="-1" aria-labelledby="editKaizenModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <div class="d-flex align-items-center">
                    <h5 class="modal-title mb-0" id="editKaizenModalLabel">
                        <i class="fas fa-eye me-2"></i>View Kaizen Suggestion
                    </h5>
                    <button type="button" class="btn btn-executive ms-2" id="executiveFillingBtn" onclick="executiveFilling()" style="display: none;">
                        <i class="fas fa-user-tie me-1"></i>Add Review
                    </button>
                </div>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editKaizenForm" enctype="multipart/form-data">
                    <input type="hidden" id="editKaizenId" name="Id" />

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="editDateSubmitted" class="form-label">
                                <i class="fas fa-calendar me-2"></i>Date Submitted
                            </label>
                            <input type="date" id="editDateSubmitted" name="DateSubmitted" class="form-control" required />
                            <span class="text-danger field-validation-error" data-valmsg-for="DateSubmitted"></span>
                        </div>
                        <div class="col-md-6">
                            <label for="editDateImplemented" class="form-label">
                                <i class="fas fa-calendar-check me-2"></i>Date Implemented
                            </label>
                            <input type="date" id="editDateImplemented" name="DateImplemented" class="form-control" />
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="editKaizenNo" class="form-label">
                                <i class="fas fa-hashtag me-2"></i>Kaizen No
                            </label>
                            <input type="text" id="editKaizenNo" name="KaizenNo" class="form-control" readonly />
                        </div>
                        <div class="col-md-6">
                            <label for="editDepartment" class="form-label">
                                <i class="fas fa-building me-2"></i>Department Name
                            </label>
                            <input type="text" id="editDepartment" name="Department" class="form-control" required />
                            <span class="text-danger field-validation-error" data-valmsg-for="Department"></span>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="editEmployeeName" class="form-label">
                                <i class="fas fa-user me-2"></i>Employee Name
                            </label>
                            <input type="text" id="editEmployeeName" name="EmployeeName" class="form-control" required />
                            <span class="text-danger field-validation-error" data-valmsg-for="EmployeeName"></span>
                        </div>
                        <div class="col-md-6">
                            <label for="editEmployeeNo" class="form-label">
                                <i class="fas fa-id-badge me-2"></i>Employee No
                            </label>
                            <input type="text" id="editEmployeeNo" name="EmployeeNo" class="form-control" required />
                            <span class="text-danger field-validation-error" data-valmsg-for="EmployeeNo"></span>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="editSuggestionDescription" class="form-label">
                            <i class="fas fa-lightbulb me-2"></i>Kaizen Suggestion Description
                        </label>
                        <textarea id="editSuggestionDescription" name="SuggestionDescription" class="form-control" rows="3" required></textarea>
                        <span class="text-danger field-validation-error" data-valmsg-for="SuggestionDescription"></span>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="editBeforeKaizenImage" class="form-label">
                                <i class="fas fa-image me-2"></i>Before Kaizen Image
                            </label>
                            <div id="editBeforeKaizenImageContainer" class="mb-2" style="display: none;">
                                <label class="form-label text-muted">Current Image:</label>
                                <div class="image-preview text-center">
                                    <img id="editBeforeKaizenCurrentImage" src="" alt="Before Kaizen" class="img-fluid rounded" style="max-height: 150px; max-width: 100%;" />
                                </div>
                            </div>
                            <input type="file" id="editBeforeKaizenImage" name="BeforeKaizenImage" class="form-control" accept="image/*" />
                            <small class="form-text text-muted">Leave empty to keep the current image</small>
                        </div>
                        <div class="col-md-6">
                            <label for="editAfterKaizenImage" class="form-label">
                                <i class="fas fa-image me-2"></i>After Kaizen Image
                            </label>
                            <div id="editAfterKaizenImageContainer" class="mb-2" style="display: none;">
                                <label class="form-label text-muted">Current Image:</label>
                                <div class="image-preview text-center">
                                    <img id="editAfterKaizenCurrentImage" src="" alt="After Kaizen" class="img-fluid rounded" style="max-height: 150px; max-width: 100%;" />
                                </div>
                            </div>
                            <input type="file" id="editAfterKaizenImage" name="AfterKaizenImage" class="form-control" accept="image/*" />
                            <small class="form-text text-muted">Leave empty to keep the current image</small>
                        </div>
                    </div>

                    <!-- Cost Saving Section -->
                    <div class="mb-3" style="border: 1px solid #dee2e6; border-radius: 8px; padding: 20px; margin-bottom: 20px; background-color: #f8f9fa;">
                        <h6 class="mb-3">
                            <i class="fas fa-coins me-2"></i>Cost Saving Information
                        </h6>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label">
                                    <i class="fas fa-coins me-2"></i>Cost Saving ($ per year)
                                </label>
                                <input type="text" id="editCostSavingDisplay" class="form-control" readonly />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">
                                    <i class="fas fa-dollar-sign me-2"></i>Current Dollar Rate
                                </label>
                                <input type="text" id="editDollarRateDisplay" class="form-control" readonly />
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="editOtherBenefits" class="form-label">
                            <i class="fas fa-star me-2"></i>Other Benefits
                        </label>
                        <textarea id="editOtherBenefits" name="OtherBenefits" class="form-control" rows="2"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Close
                </button>
                <button type="button" class="btn btn-update" id="saveEditBtn" onclick="saveKaizenEdit()" style="display: none;">
                    <i class="fas fa-save me-2"></i>Update Suggestion
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Enhanced Edit Modal -->
<div class="modal fade" id="enhancedEditModal" tabindex="-1" aria-labelledby="enhancedEditModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="enhancedEditModalLabel">
                    <i class="fas fa-user-tie me-2"></i>Add Review
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info mb-3">
                    <i class="fas fa-info-circle me-2"></i>
                    <strong>Note:</strong> You can fill in any one or more of the following fields. At least one field must be completed.
                </div>
                <form id="enhancedEditForm" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="enhancedEditKaizenId" name="Id" />

                    <!-- Hidden required fields to ensure they're included in form submission -->
                    <input type="hidden" id="enhancedEditKaizenNoHidden" name="KaizenNo" />
                    <input type="hidden" id="enhancedEditEmployeeNoHidden" name="EmployeeNo" />
                    <input type="hidden" id="enhancedEditEmployeeNameHidden" name="EmployeeName" />
                    <input type="hidden" id="enhancedEditSuggestionDescriptionHidden" name="SuggestionDescription" />
                    <input type="hidden" id="enhancedEditDateSubmittedHidden" name="DateSubmitted" />

                    <!-- Review Form Section -->
                    <div class="mb-4" style="border: 1px solid #dee2e6; border-radius: 8px; padding: 20px; background-color: #f8f9fa;">
                        <h6 class="mb-3">
                            <i class="fas fa-user-tie me-2"></i>Review Details
                        </h6>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="enhancedEditCategory" class="form-label">
                                    <i class="fas fa-folder me-2"></i>Recommended Categories <span class="text-muted">(Optional)</span>
                                </label>
                                <div class="mt-2" id="dynamicCategoriesContainer">
                                    <!-- Categories will be loaded dynamically from database -->
                                    <div class="text-center">
                                        <i class="fas fa-spinner fa-spin"></i> Loading categories...
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <label for="enhancedEditApprovedBy" class="form-label">
                                    <i class="fas fa-signature me-2"></i>Signature (Add Name) <span class="text-muted">(Optional)</span>
                                </label>
                                <input type="text" id="enhancedEditApprovedBy" name="ApprovedBy" class="form-control" placeholder="Enter your name" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="enhancedEditComments" class="form-label">
                                <i class="fas fa-comments me-2"></i>Comment & Recommendations <span class="text-muted">(Optional)</span>
                            </label>
                            <textarea id="enhancedEditComments" name="Comments" class="form-control" rows="4" placeholder="Enter your comments and recommendations..."></textarea>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">
                                <i class="fas fa-question-circle me-2"></i>Can this suggestion be implemented in other fields? <span class="text-muted">(Optional)</span>
                            </label>
                            <div class="mt-2">
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="CanImplementInOtherFields" id="enhanced_implementYes" value="Yes" onchange="toggleEnhancedImplementationArea()">
                                    <label class="form-check-label" for="enhanced_implementYes">Yes</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="CanImplementInOtherFields" id="enhanced_implementNo" value="No" onchange="toggleEnhancedImplementationArea()">
                                    <label class="form-check-label" for="enhanced_implementNo">No</label>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3" id="implementationAreaField" style="display: none;">
                            <label for="enhancedEditImplementationArea" class="form-label">
                                <i class="fas fa-map-marker-alt me-2"></i>Specify Area
                            </label>
                            <input type="text" id="enhancedEditImplementationArea" name="ImplementationArea" class="form-control" placeholder="Type departments separated by commas (e.g., HR, IT, Admin)" />
                            <div id="suggestionsContainer" class="suggestions-container" style="display: none;"></div>
                            <small class="form-text text-muted">Type department names and separate multiple departments with commas</small>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Cancel
                </button>
                <button type="button" class="btn btn-executive" id="saveExecutiveBtn" onclick="saveExecutiveFilling()">
                    <i class="fas fa-save me-2"></i>Save Review
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Approval Popup Modal -->
<div class="modal fade" id="approvalModal" tabindex="-1" aria-labelledby="approvalModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="approvalModalLabel">
                    <i class="fas fa-gavel me-2"></i>Kaizen Approval
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <div class="mb-4">
                    <i class="fas fa-question-circle fa-3x text-primary mb-3"></i>
                    <h5>What would you like to do with this Kaizen suggestion?</h5>
                    <p class="text-muted">Please select your decision below</p>
                </div>
                <div class="d-flex justify-content-center gap-3">
                    <button type="button" class="btn btn-approve btn-lg" onclick="showNameInput('approve')">
                        <i class="fas fa-check me-2"></i>Approve
                    </button>
                    <button type="button" class="btn btn-reject btn-lg" onclick="showNameInput('reject')">
                        <i class="fas fa-times me-2"></i>Reject
                    </button>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Cancel
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Name Input Modal -->
<div class="modal fade" id="nameInputModal" tabindex="-1" aria-labelledby="nameInputModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="nameInputModalLabel">
                    <i class="fas fa-user me-2"></i>Enter Your Name
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="userNameInput" class="form-label">
                        <i class="fas fa-signature me-2"></i>Your Name
                    </label>
                    <input type="text" id="userNameInput" class="form-control" placeholder="Enter your full name" required />
                    <div class="invalid-feedback">
                        Please enter your name.
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Cancel
                </button>
                <button type="button" class="btn btn-primary" id="confirmActionBtn" onclick="confirmAction()">
                    <i class="fas fa-check me-2"></i>Confirm
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}

<script>
    // Load departments for autocomplete
    let departmentsLoaded = false;
    let allDepartments = [];
    
    function loadDepartments() {
        if (departmentsLoaded) return;
        
        fetch('/Kaizen/GetDepartments')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    allDepartments = data.departments;
                    departmentsLoaded = true;
                    
                    // Initialize autocomplete for the input field
                    initializeAutocomplete();
                } else {
                    console.error('Error loading departments:', data.message);
                }
            })
            .catch(error => {
                console.error('Error loading departments:', error);
            });
    }

    function initializeAutocomplete() {
        const input = document.getElementById('enhancedEditImplementationArea');
        const suggestionsContainer = document.getElementById('suggestionsContainer');
        
        if (!input || !suggestionsContainer) return;
        
        let selectedIndex = -1;
        
        input.addEventListener('input', function() {
            const value = this.value;
            const cursorPosition = this.selectionStart;
            
            // Get the current word being typed (before the cursor)
            const beforeCursor = value.substring(0, cursorPosition);
            const words = beforeCursor.split(',').map(word => word.trim());
            const currentWord = words[words.length - 1];
            
            if (currentWord.length >= 1) {
                // Filter departments that match the current word
                const suggestions = allDepartments.filter(dept => 
                    dept.toLowerCase().includes(currentWord.toLowerCase()) &&
                    !words.slice(0, -1).includes(dept) // Don't suggest already selected departments
                );
                
                if (suggestions.length > 0) {
                    showSuggestions(suggestions, currentWord);
                } else {
                    hideSuggestions();
                }
            } else {
                hideSuggestions();
            }
        });
        
        input.addEventListener('keydown', function(e) {
            const suggestions = suggestionsContainer.querySelectorAll('.suggestion-item');
            
            if (e.key === 'ArrowDown') {
                e.preventDefault();
                selectedIndex = Math.min(selectedIndex + 1, suggestions.length - 1);
                updateSelectedSuggestion(suggestions);
            } else if (e.key === 'ArrowUp') {
                e.preventDefault();
                selectedIndex = Math.max(selectedIndex - 1, -1);
                updateSelectedSuggestion(suggestions);
            } else if (e.key === 'Enter' && selectedIndex >= 0) {
                e.preventDefault();
                selectSuggestion(suggestions[selectedIndex]);
            } else if (e.key === 'Escape') {
                hideSuggestions();
                selectedIndex = -1;
            }
        });
        
        // Hide suggestions when clicking outside
        document.addEventListener('click', function(e) {
            if (!input.contains(e.target) && !suggestionsContainer.contains(e.target)) {
                hideSuggestions();
                selectedIndex = -1;
            }
        });
    }
    
    function showSuggestions(suggestions, currentWord) {
        const suggestionsContainer = document.getElementById('suggestionsContainer');
        suggestionsContainer.innerHTML = '';
        
        suggestions.forEach(suggestion => {
            const item = document.createElement('div');
            item.className = 'suggestion-item';
            item.textContent = suggestion;
            
            item.addEventListener('click', function() {
                selectSuggestion(this);
            });
            
            suggestionsContainer.appendChild(item);
        });
        
        suggestionsContainer.style.display = 'block';
    }
    
    function hideSuggestions() {
        const suggestionsContainer = document.getElementById('suggestionsContainer');
        suggestionsContainer.style.display = 'none';
    }
    
    function updateSelectedSuggestion(suggestions) {
        suggestions.forEach((item, index) => {
            if (index === selectedIndex) {
                item.classList.add('selected');
            } else {
                item.classList.remove('selected');
            }
        });
    }
    
    // Load categories from database
    function loadCategories() {
        fetch('/Kaizen/GetCategories')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const container = document.getElementById('dynamicCategoriesContainer');
                    container.innerHTML = '';
                    
                    data.categories.forEach(category => {
                        const categoryDiv = document.createElement('div');
                        categoryDiv.className = 'form-check form-check-inline';
                        categoryDiv.innerHTML = `
                            <input class="form-check-input category-checkbox" type="checkbox" name="Category" 
                                   id="enhanced_category_${category.id}" value="${category.name}">
                            <label class="form-check-label" for="enhanced_category_${category.id}">${category.name}</label>
                        `;
                        container.appendChild(categoryDiv);
                    });
                } else {
                    console.error('Failed to load categories:', data.message);
                    const container = document.getElementById('dynamicCategoriesContainer');
                    container.innerHTML = '<div class="text-danger">Failed to load categories</div>';
                }
            })
            .catch(error => {
                console.error('Error loading categories:', error);
                const container = document.getElementById('dynamicCategoriesContainer');
                container.innerHTML = '<div class="text-danger">Error loading categories</div>';
            });
    }

    function selectSuggestion(suggestionElement) {
        const input = document.getElementById('enhancedEditImplementationArea');
        const value = input.value;
        const cursorPosition = input.selectionStart;
        
        // Get the current word being typed (before the cursor)
        const beforeCursor = value.substring(0, cursorPosition);
        const afterCursor = value.substring(cursorPosition);
        const words = beforeCursor.split(',').map(word => word.trim());
        const currentWord = words[words.length - 1];
        
        // Replace the current word with the selected suggestion
        const newBeforeCursor = beforeCursor.substring(0, beforeCursor.lastIndexOf(currentWord)) + suggestionElement.textContent;
        const newValue = newBeforeCursor + afterCursor;
        
        input.value = newValue;
        
        // Position cursor after the selected suggestion
        const newCursorPosition = newBeforeCursor.length;
        input.setSelectionRange(newCursorPosition, newCursorPosition);
        
        hideSuggestions();
        
        // Trigger input event to update suggestions for the next word
        input.dispatchEvent(new Event('input'));
    }

    // Search functionality enhancements
    document.addEventListener('DOMContentLoaded', function() {
        // Load departments when page loads
        loadDepartments();
        
        // Load categories when page loads
        loadCategories();
        
        const searchForm = document.getElementById('searchForm');
        const startDateInput = document.getElementById('startDate');
        const endDateInput = document.getElementById('endDate');

        // Set default date range to last 30 days if no dates are selected
        if (!startDateInput.value && !endDateInput.value) {
            const today = new Date();
            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(today.getDate() - 30);
            
            startDateInput.value = thirtyDaysAgo.toISOString().split('T')[0];
            endDateInput.value = today.toISOString().split('T')[0];
        }

        // Validate date range
        searchForm.addEventListener('submit', function(e) {
            const startDate = new Date(startDateInput.value);
            const endDate = new Date(endDateInput.value);
            
            if (startDateInput.value && endDateInput.value && startDate > endDate) {
                e.preventDefault();
                showToast('Start date cannot be after end date.', 'error');
                return false;
            }
        });

        // Add event listeners for cost saving radio buttons in edit modal
        const editNoCostSavingRadio = document.getElementById('editNoCostSaving');
        const editHasCostSavingRadio = document.getElementById('editHasCostSaving');
        const editCostSavingFields = document.getElementById('editCostSavingFields');

        if (editNoCostSavingRadio && editHasCostSavingRadio) {
            editNoCostSavingRadio.addEventListener('change', function() {
                if (this.checked) {
                    editCostSavingFields.style.display = 'none';
                    // Clear the values when hidden
                    document.getElementById('editCostSaving').value = '';
                    document.getElementById('editDollarRate').value = '';
                }
            });

            editHasCostSavingRadio.addEventListener('change', function() {
                if (this.checked) {
                    editCostSavingFields.style.display = 'block';
                }
            });
        }
    });

    function viewKaizen(id) {
        // Show loading state
        const modal = new bootstrap.Modal(document.getElementById('editKaizenModal'));
        modal.show();

        // Reset form to view-only mode
        setFormReadOnly(true);
        document.getElementById('saveEditBtn').style.display = 'none';
        document.getElementById('executiveFillingBtn').style.display = 'none';

        // Fetch kaizen data
        fetch(`/Kaizen/Edit/${id}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Populate form fields
                    document.getElementById('editKaizenId').value = data.data.id;
                    document.getElementById('editKaizenNo').value = data.data.kaizenNo;
                    document.getElementById('editDateSubmitted').value = data.data.dateSubmitted.split('T')[0];
                    document.getElementById('editDateImplemented').value = data.data.dateImplemented ? data.data.dateImplemented.split('T')[0] : '';
                    document.getElementById('editDepartment').value = data.data.department;
                    document.getElementById('editEmployeeName').value = data.data.employeeName;
                    document.getElementById('editEmployeeNo').value = data.data.employeeNo;
                    document.getElementById('editSuggestionDescription').value = data.data.suggestionDescription || '';
                    document.getElementById('editCostSavingDisplay').value = data.data.costSaving ? `$${data.data.costSaving}` : 'N/A';
                    document.getElementById('editDollarRateDisplay').value = data.data.dollarRate ? `$${data.data.dollarRate}` : 'N/A';
                    document.getElementById('editOtherBenefits').value = data.data.otherBenefits || '';

                    // Handle existing images
                    const beforeImageContainer = document.getElementById('editBeforeKaizenImageContainer');
                    const afterImageContainer = document.getElementById('editAfterKaizenImageContainer');
                    const beforeImage = document.getElementById('editBeforeKaizenCurrentImage');
                    const afterImage = document.getElementById('editAfterKaizenCurrentImage');

                    // Show/hide before image
                    if (data.data.beforeKaizenImagePath) {
                        beforeImage.src = data.data.beforeKaizenImagePath;
                        beforeImageContainer.style.display = 'block';
                    } else {
                        beforeImageContainer.style.display = 'none';
                    }

                    // Show/hide after image
                    if (data.data.afterKaizenImagePath) {
                        afterImage.src = data.data.afterKaizenImagePath;
                        afterImageContainer.style.display = 'block';
                    } else {
                        afterImageContainer.style.display = 'none';
                    }

                    // Check if kaizen is pending, approved, or rejected and show executive filling button
                    const engineerStatus = data.data.engineerStatus || 'Pending';
                    if (engineerStatus === 'Pending' || engineerStatus === 'Approved' || engineerStatus === 'Rejected') {
                        document.getElementById('executiveFillingBtn').style.display = 'block';
                    }
                } else {
                    showToast('Error: ' + data.message, 'error');
                    modal.hide();
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('An error occurred while loading the kaizen data.', 'error');
                modal.hide();
            });
    }

    function executiveFilling(id) {
        // Use the provided kaizen ID
        const kaizenId = id;

        // Load departments if not already loaded
        loadDepartments();
        
        // Initialize autocomplete functionality
        initializeAutocomplete();

        // Show the enhanced edit modal (Executive/Engineer form)
        const enhancedModal = new bootstrap.Modal(document.getElementById('enhancedEditModal'));
        enhancedModal.show();

        // Clear the form first
        clearExecutiveForm();

        // Fetch kaizen data for enhanced edit
        fetch(`/Kaizen/Edit/${kaizenId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Populate form fields
                    document.getElementById('enhancedEditKaizenId').value = data.data.id;

                    // Populate hidden fields for form submission
                    document.getElementById('enhancedEditKaizenNoHidden').value = data.data.kaizenNo || '';
                    document.getElementById('enhancedEditEmployeeNoHidden').value = data.data.employeeNo || '';
                    document.getElementById('enhancedEditEmployeeNameHidden').value = data.data.employeeName || '';
                    document.getElementById('enhancedEditSuggestionDescriptionHidden').value = data.data.suggestionDescription || '';
                    document.getElementById('enhancedEditDateSubmittedHidden').value = data.data.dateSubmitted || '';

                    // Set category checkboxes (handle multiple selections)
                    const category = data.data.category || '';
                    if (category) {
                        // Split comma-separated categories and check corresponding checkboxes
                        const categories = category.split(',').map(cat => cat.trim());
                        categories.forEach(cat => {
                            // Use the enhanced modal checkboxes
                            const checkbox = document.querySelector(`#enhancedEditModal input[name="Category"][value="${cat}"]`);
                            if (checkbox) {
                                checkbox.checked = true;
                            }
                        });
                    }

                    // Set signature field
                    document.getElementById('enhancedEditApprovedBy').value = data.data.engineerApprovedBy || '';

                    // Set comments field
                    document.getElementById('enhancedEditComments').value = data.data.comments || '';

                    // Set implementation area fields
                    const canImplement = data.data.canImplementInOtherFields || '';
                    if (canImplement === 'Yes') {
                        document.getElementById('enhanced_implementYes').checked = true;
                        document.getElementById('implementationAreaField').style.display = 'block';
                        document.getElementById('enhancedEditImplementationArea').value = data.data.implementationArea || '';
                    } else if (canImplement === 'No') {
                        document.getElementById('enhanced_implementNo').checked = true;
                        document.getElementById('implementationAreaField').style.display = 'none';
                    }

                    // For rejected kaizens, make category and implementation fields optional
                    const engineerStatus = data.data.engineerStatus || 'Pending';
                    if (engineerStatus === 'Rejected') {
                        // Add visual indication that these fields are optional for rejected kaizens
                        const categorySection = document.querySelector('#enhancedEditModal .mb-4');
                        if (categorySection) {
                            const categoryLabel = categorySection.querySelector('label[for="enhancedEditCategory"]');
                            if (categoryLabel) {
                                categoryLabel.innerHTML = '<i class="fas fa-folder me-2"></i>Recommended Categories (Optional for rejected kaizens)';
                            }
                        }
                        
                        const implementationLabel = document.querySelector('#enhancedEditModal label[for="enhanced_implementYes"]');
                        if (implementationLabel) {
                            const parentDiv = implementationLabel.closest('.mb-3');
                            if (parentDiv) {
                                const label = parentDiv.querySelector('label');
                                if (label) {
                                    label.innerHTML = '<i class="fas fa-question-circle me-2"></i>Can this suggestion be implemented in other fields? (Optional for rejected kaizens)';
                                }
                            }
                        }
                    }
                } else {
                    showToast('Error: ' + data.message, 'error');
                    enhancedModal.hide();
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('An error occurred while loading the kaizen data.', 'error');
                enhancedModal.hide();
            });
    }

    function setFormReadOnly(readonly) {
        const form = document.getElementById('editKaizenForm');
        const inputs = form.querySelectorAll('input, textarea, select');

        inputs.forEach(input => {
            if (input.id !== 'editKaizenId' && input.id !== 'editKaizenNo') {
                input.readOnly = readonly;
                input.disabled = readonly;
            }
        });

        // Handle radio buttons and file inputs separately
        const radioButtons = form.querySelectorAll('input[type="radio"]');
        const fileInputs = form.querySelectorAll('input[type="file"]');

        radioButtons.forEach(radio => {
            radio.disabled = readonly;
        });

        fileInputs.forEach(fileInput => {
            fileInput.disabled = readonly;
        });
    }

    function saveKaizenEdit() {
        const form = document.getElementById('editKaizenForm');
        const formData = new FormData(form);
        const id = document.getElementById('editKaizenId').value;

        // Add antiforgery token
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        formData.append('__RequestVerificationToken', token);

        fetch(`/Kaizen/Edit/${id}`, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showSubmissionToast(data.message, 'success');
                bootstrap.Modal.getInstance(document.getElementById('editKaizenModal')).hide();
                // Reload the page to show updated data
                location.reload();
            } else {
                showToast('Error: ' + data.message, 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showToast('An error occurred while saving the changes.', 'error');
        });
    }

    // Global variable to store current kaizen ID for approval
    let currentKaizenId = null;

    function showApprovalPopup(id) {
        currentKaizenId = id;
        const modal = new bootstrap.Modal(document.getElementById('approvalModal'));
        modal.show();
    }

    function showNameInput(action) {
        // Clear the input field
        document.getElementById('userNameInput').value = '';
        
        const modal = new bootstrap.Modal(document.getElementById('nameInputModal'));
        modal.show();
        
        // Set the onclick handler for the confirm button
        document.getElementById('confirmActionBtn').onclick = function() {
            const name = document.getElementById('userNameInput').value.trim();
            if (name) {
                if (action === 'approve') {
                    approveKaizen(currentKaizenId, name);
                } else if (action === 'reject') {
                    rejectKaizen(currentKaizenId, name);
                }
                modal.hide();
            } else {
                showToast('Please enter your name to confirm the action.', 'error');
                document.getElementById('userNameInput').focus();
            }
        };
    }

    function confirmAction() {
        // This function is now handled by the onclick attribute of confirmActionBtn
        // It will be called when the user clicks the confirm button in the nameInputModal
    }

    function approveKaizen(id, name) {
        if (!id) return;

        if (confirm(`Are you sure you want to approve this Kaizen suggestion?`)) {
            fetch(`/Kaizen/UpdateEngineerStatus/${id}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ engineerStatus: 'Approved', engineerApprovedBy: name })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showSubmissionToast('Kaizen suggestion approved successfully!', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('approvalModal')).hide();
                    location.reload();
                } else {
                    showToast('Error: ' + data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('An error occurred while approving the suggestion.', 'error');
            });
        }
    }

    function rejectKaizen(id, name) {
        if (!id) return;

        if (confirm(`Are you sure you want to reject this Kaizen suggestion?`)) {
            fetch(`/Kaizen/UpdateEngineerStatus/${id}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ engineerStatus: 'Rejected', engineerApprovedBy: name })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showSubmissionToast('Kaizen suggestion rejected successfully!', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('approvalModal')).hide();
                    location.reload();
                } else {
                    showToast('Error: ' + data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('An error occurred while rejecting the suggestion.', 'error');
            });
        }
    }

    function saveExecutiveFilling() {
        // Get the kaizen ID
        const kaizenId = document.getElementById('enhancedEditKaizenId').value;
        
        // Get current engineer status to determine validation rules
        let currentEngineerStatus = '';
        
        // Fetch current kaizen status
        fetch(`/Kaizen/Edit/${kaizenId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    currentEngineerStatus = data.data.engineerStatus || 'Pending';
                    validateAndSaveExecutiveFilling(kaizenId, currentEngineerStatus);
                } else {
                    showToast('Error: ' + data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('An error occurred while validating the form.', 'error');
            });
    }

    function validateAndSaveExecutiveFilling(kaizenId, engineerStatus) {
        // Validate that at least one field is filled (executive can fill only one field)
        const approvedBy = document.getElementById('enhancedEditApprovedBy').value.trim();
        const comments = document.getElementById('enhancedEditComments').value.trim();
        const canImplementInOtherFields = document.querySelector('input[name="CanImplementInOtherFields"]:checked')?.value;
        const selectedCategories = document.querySelectorAll('#enhancedEditModal input[name="Category"]:checked');
        
        let hasAnyFieldFilled = false;
        
        if (approvedBy) {
            hasAnyFieldFilled = true;
        }
        
        if (comments) {
            hasAnyFieldFilled = true;
        }
        
        if (canImplementInOtherFields) {
            hasAnyFieldFilled = true;
        }
        
        if (selectedCategories.length > 0) {
            hasAnyFieldFilled = true;
        }
        
        if (!hasAnyFieldFilled) {
            showToast('Please fill in at least one field (Signature, Comments, Categories, or Implementation question).', 'error');
            return;
        }

        // Show loading state
        const saveBtn = document.getElementById('saveExecutiveBtn');
        const originalText = saveBtn.innerHTML;
        saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Saving...';
        saveBtn.disabled = true;

        // Prepare form data
        const formData = new FormData();
        
        // Add category checkboxes from enhanced modal (only if categories are selected)
        const categoryCheckboxes = document.querySelectorAll('#enhancedEditModal input[name="Category"]:checked');
        categoryCheckboxes.forEach(checkbox => {
            formData.append('Category', checkbox.value);
        });
        
        formData.append('ApprovedBy', approvedBy);
        formData.append('Comments', comments);
        
        // Only add implementation fields if they are selected (not required for rejected kaizens)
        if (canImplementInOtherFields) {
            formData.append('CanImplementInOtherFields', canImplementInOtherFields);
            
            // Add implementation area if "Yes" is selected
            if (canImplementInOtherFields === 'Yes') {
                const implementationArea = document.getElementById('enhancedEditImplementationArea').value.trim();
                formData.append('ImplementationArea', implementationArea);
            }
        }
        
        formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

        // Send the data to the server
        fetch(`/Kaizen/SaveExecutiveFilling/${kaizenId}`, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                                    showSubmissionToast('Review saved successfully!', 'success');
                bootstrap.Modal.getInstance(document.getElementById('enhancedEditModal')).hide();
                
                // Reload the page to show updated data
                location.reload();
            } else {
                showToast('Error: ' + data.message, 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showToast('An error occurred while saving the executive review.', 'error');
        })
        .finally(() => {
            // Restore button state
            saveBtn.innerHTML = originalText;
            saveBtn.disabled = false;
        });
    }

    function toggleImplementationArea() {
        const implementYes = document.getElementById('implementYes');
        const implementationAreaField = document.getElementById('implementationAreaField');
        
        if (implementYes.checked) {
            implementationAreaField.style.display = 'block';
        } else {
            implementationAreaField.style.display = 'none';
            document.getElementById('enhancedEditImplementationArea').value = '';
        }
    }

    function clearExecutiveForm() {
        // Clear all category checkboxes
        const categoryCheckboxes = document.querySelectorAll('#enhancedEditModal input[name="Category"]');
        categoryCheckboxes.forEach(checkbox => {
            checkbox.checked = false;
        });

        // Clear signature field
        document.getElementById('enhancedEditApprovedBy').value = '';

        // Clear comments field
        document.getElementById('enhancedEditComments').value = '';

        // Clear radio buttons
        const radioButtons = document.querySelectorAll('#enhancedEditModal input[name="CanImplementInOtherFields"]');
        radioButtons.forEach(radio => {
            radio.checked = false;
        });

        // Hide implementation area field and clear input
        document.getElementById('implementationAreaField').style.display = 'none';
        document.getElementById('enhancedEditImplementationArea').value = '';
        
        // Hide suggestions if they're visible
        const suggestionsContainer = document.getElementById('suggestionsContainer');
        if (suggestionsContainer) {
            suggestionsContainer.style.display = 'none';
        }
    }

    function toggleEnhancedImplementationArea() {
        const implementYes = document.getElementById('enhanced_implementYes');
        const implementationAreaField = document.getElementById('implementationAreaField');
        
        if (implementYes.checked) {
            implementationAreaField.style.display = 'block';
        } else {
            implementationAreaField.style.display = 'none';
            document.getElementById('enhancedEditImplementationArea').value = '';
        }
    }




</script> 