@model KaizenWebApp.Models.KaizenFormViewModel
@{
    ViewData["Title"] = "Kaizen Suggestion Form";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .form-control[readonly] {
        background-color: #f8f9fa;
        border-color: #dee2e6;
        color: #495057;
        cursor: not-allowed;
    }

    .form-control[readonly]:focus {
        background-color: #f8f9fa;
        border-color: #dee2e6;
        box-shadow: none;
    }

    .cost-saving-section {
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
        background-color: #f8f9fa;
    }

    .radio-group {
        display: flex;
        gap: 20px;
        margin-bottom: 15px;
    }

    .radio-item {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .radio-item input[type="radio"] {
        margin: 0;
    }

    .conditional-field {
        display: none;
        margin-top: 15px;
        padding: 15px;
        background-color: white;
        border-radius: 6px;
        border: 1px solid #ced4da;
    }

    .conditional-field.show {
        display: block;
    }

    .is-invalid {
        border-color: #dc3545 !important;
        box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25) !important;
    }

    .field-error-message {
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .summary-error {
        border-radius: 0.375rem;
        margin-bottom: 1rem;
    }
</style>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="card shadow-lg p-4 rounded-4 border-0">

                <!-- Language Selector -->
                <div class="d-flex justify-content-end mb-3">
                    <div class="dropdown">
                        <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="languageDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="fas fa-globe me-2"></i><span id="currentLanguage">English</span>
                        </button>
                        <ul class="dropdown-menu" aria-labelledby="languageDropdown">
                            <li><a class="dropdown-item" href="#" onclick="changeLanguage('en')">English</a></li>
                            <li><a class="dropdown-item" href="#" onclick="changeLanguage('si')">සිංහල</a></li>
                            <li><a class="dropdown-item" href="#" onclick="changeLanguage('ta')">தமிழ்</a></li>
                        </ul>
                    </div>
                </div>

                <h2 class="text-center text-danger mb-4" data-lang-key="title">@ViewData["Title"]</h2>

                @if (TempData["Success"] != null)
                {
                    <div class="alert alert-success text-center">@TempData["Success"]</div>
                }

                <form asp-action="Kaizenform" asp-controller="Kaizen" method="post" enctype="multipart/form-data" id="kaizenForm">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label asp-for="DateSubmitted" class="form-label" data-lang-key="dateSubmitted"></label>
                            <input asp-for="DateSubmitted" type="date" class="form-control" />
                            <span asp-validation-for="DateSubmitted" class="text-danger"></span>
                        </div>
                        <div class="col-md-6">
                            <label asp-for="DateImplemented" class="form-label" data-lang-key="dateImplemented"></label>
                            <input asp-for="DateImplemented" type="date" class="form-control" />
                            <span asp-validation-for="DateImplemented" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label asp-for="KaizenNo" class="form-label" data-lang-key="kaizenNo"></label>
                            <input asp-for="KaizenNo" id="KaizenNo" class="form-control" readonly />
                            <span asp-validation-for="KaizenNo" class="text-danger"></span>
                        </div>
                        <div class="col-md-6">
                            <label asp-for="Department" class="form-label">Department Name</label>
                            <input asp-for="Department" class="form-control" readonly />
                            <span asp-validation-for="Department" class="text-danger"></span>
                            <small class="form-text text-muted">Department Name is automatically set based on your registration</small>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label asp-for="EmployeeName" class="form-label" data-lang-key="employeeName"></label>
                            <input asp-for="EmployeeName" class="form-control" />
                            <span asp-validation-for="EmployeeName" class="text-danger"></span>
                        </div>
                        <div class="col-md-6">
                            <label asp-for="EmployeeNo" class="form-label" data-lang-key="employeeNo"></label>
                            <input asp-for="EmployeeNo" class="form-control" />
                            <span asp-validation-for="EmployeeNo" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label asp-for="EmployeePhoto" class="form-label" data-lang-key="employeePhoto">Employee Photo</label>
                        <input asp-for="EmployeePhoto" type="file" class="form-control" accept="image/*" />
                        <span asp-validation-for="EmployeePhoto" class="text-danger"></span>
                                                    <small class="form-text text-muted">Upload a photo of the employee (PNG, JPG, JPEG, WebP up to 5MB)</small>
                    </div>

                    <div class="mb-3">
                        <label asp-for="SuggestionDescription" class="form-label" data-lang-key="suggestionDescription"></label>
                        <textarea asp-for="SuggestionDescription" class="form-control" rows="3"></textarea>
                        <span asp-validation-for="SuggestionDescription" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="BeforeKaizenImage" class="form-label" data-lang-key="beforeKaizenImage">Before Kaizen Image (Upload QR/Image)</label>
                        <input asp-for="BeforeKaizenImage" type="file" class="form-control" accept="image/*" />
                        <span asp-validation-for="BeforeKaizenImage" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="AfterKaizenImage" class="form-label" data-lang-key="afterKaizenImage">After Kaizen Image (Upload QR/Image)</label>
                        <input asp-for="AfterKaizenImage" type="file" class="form-control" accept="image/*" />
                        <span asp-validation-for="AfterKaizenImage" class="text-danger"></span>
                    </div>



                    <!-- Cost Saving Section -->
                    <div class="cost-saving-section">
                        <h5 class="mb-3" data-lang-key="costSavingTitle">Cost Saving Information</h5>
                        
                        <div class="radio-group">
                            <div class="radio-item">
                                <input type="radio" asp-for="CostSavingType" id="noCostSaving" value="NoCostSaving" checked />
                                <label for="noCostSaving" data-lang-key="noCostSaving">No Cost Saving</label>
                            </div>
                            <div class="radio-item">
                                <input type="radio" asp-for="CostSavingType" id="hasCostSaving" value="HasCostSaving" />
                                <label for="hasCostSaving" data-lang-key="hasCostSaving">Has Cost Saving</label>
                            </div>
                        </div>

                        <div id="costSavingFields" class="conditional-field @(Model?.CostSavingType == "HasCostSaving" ? "show" : "")">
                            <div class="row">
                                <div class="col-md-6">
                                    <label asp-for="CostSaving" class="form-label" data-lang-key="costSaving"></label>
                                    <input asp-for="CostSaving" class="form-control" type="number" step="0.01" min="0" />
                                    <span asp-validation-for="CostSaving" class="text-danger"></span>
                                </div>
                                <div class="col-md-6">
                                    <label asp-for="DollarRate" class="form-label" data-lang-key="dollarRate"></label>
                                    <input asp-for="DollarRate" class="form-control" type="number" step="0.01" min="0" />
                                    <span asp-validation-for="DollarRate" class="text-danger"></span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label asp-for="OtherBenefits" class="form-label" data-lang-key="otherBenefits"></label>
                        <textarea asp-for="OtherBenefits" class="form-control" rows="2"></textarea>
                        <span asp-validation-for="OtherBenefits" class="text-danger"></span>
                    </div>

                    <button type="submit" class="btn btn-danger w-100" data-lang-key="submitButton">Submit Suggestion</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}

<script>
    const translations = {
        en: {
            title: "Kaizen Suggestion Form",
            dateSubmitted: "Date Submitted",
            dateImplemented: "Date Implemented",
            kaizenNo: "Kaizen No",
            department: "Department / Cell",
            employeeName: "Employee Name",
            employeeNo: "Employee No",
            suggestionDescription: "Kaizen Suggestion Description",
            beforeKaizenImage: "Before Kaizen Image (Upload QR/Image)",
            afterKaizenImage: "After Kaizen Image (Upload QR/Image)",
            employeePhoto: "Employee Photo",

            costSavingTitle: "Cost Saving Information",
            noCostSaving: "No Cost Saving",
            hasCostSaving: "Has Cost Saving",
            costSaving: "Cost Saving ($ per year)",
            dollarRate: "Current Dollar Rate",
            otherBenefits: "Other Benefits",
            submitButton: "Submit Suggestion"
        },
        si: {
            title: "කයිසන් යෝජනා පෝරමය",
            dateSubmitted: "ඉදිරිපත් කළ දිනය",
            dateImplemented: "ක්‍රියාත්මක කළ දිනය",
            kaizenNo: "කයිසන් අංකය",
            department: "දෙපාර්තමේන්තුව / කොටුව",
            employeeName: "සේවක නම",
            employeeNo: "සේවක අංකය",
            suggestionDescription: "කයිසන් යෝජනා විස්තරය",
            beforeKaizenImage: "කයිසන් පෙර රූපය (QR/රූපය උඩුගත කරන්න)",
            afterKaizenImage: "කයිසන් පසු රූපය (QR/රූපය උඩුගත කරන්න)",
            employeePhoto: "සේවක රූපය",

            costSavingTitle: "පිරිවැය ඉතිරිකිරීමේ තොරතුරු",
            noCostSaving: "පිරිවැය ඉතිරිකිරීමක් නැත",
            hasCostSaving: "පිරිවැය ඉතිරිකිරීමක් ඇත",
            costSaving: "පිරිවැය ඉතිරිකිරීම (වර්ෂයකට ඩොලර්)",
            dollarRate: "වර්තමාන ඩොලර් අනුපාතය",
            otherBenefits: "වෙනත් ප්‍රතිලාභ",
            submitButton: "යෝජනාව ඉදිරිපත් කරන්න"
        },
        ta: {
            title: "கைசென் பரிந்துரை படிவம்",
            dateSubmitted: "சமர்ப்பித்த தேதி",
            dateImplemented: "செயல்படுத்தப்பட்ட தேதி",
            kaizenNo: "கைசென் எண்",
            department: "துறை / செல்",
            employeeName: "பணியாளர் பெயர்",
            employeeNo: "பணியாளர் எண்",
            suggestionDescription: "கைசென் பரிந்துரை விளக்கம்",
            beforeKaizenImage: "கைசென் முன் படம் (QR/படம் பதிவேற்றவும்)",
            afterKaizenImage: "கைசென் பின் படம் (QR/படம் பதிவேற்றவும்)",
            employeePhoto: "பணியாளர் படம்",

            costSavingTitle: "செலவு சேமிப்பு தகவல்",
            noCostSaving: "செலவு சேமிப்பு இல்லை",
            hasCostSaving: "செலவு சேமிப்பு உள்ளது",
            costSaving: "செலவு சேமிப்பு (வருடத்திற்கு டாலர்)",
            dollarRate: "தற்போதைய டாலர் விகிதம்",
            otherBenefits: "மற்ற நன்மைகள்",
            submitButton: "பரிந்துரையை சமர்ப்பிக்கவும்"
        }
    };

    function changeLanguage(lang) {
        const langData = translations[lang];
        document.getElementById('currentLanguage').textContent = { en: 'English', si: 'සිංහල', ta: 'தமிழ்' }[lang];

        document.querySelectorAll('[data-lang-key]').forEach(el => {
            const key = el.getAttribute('data-lang-key');
            if (langData[key]) el.textContent = langData[key];
        });

        localStorage.setItem('selectedLanguage', lang);
    }

    function generateKaizenNo() {
        const date = new Date();
        const datePart = `${date.getFullYear()}${(date.getMonth()+1).toString().padStart(2, '0')}${date.getDate().toString().padStart(2, '0')}`;
        const randomNum = Math.floor(100 + Math.random() * 900); // 3 digit
        return `KZN-${datePart}-${randomNum}`;
    }

    // Handle cost saving radio button changes
    function handleCostSavingChange() {
        const hasCostSaving = document.getElementById('hasCostSaving');
        const costSavingFields = document.getElementById('costSavingFields');
        
        if (hasCostSaving.checked) {
            costSavingFields.classList.add('show');
        } else {
            costSavingFields.classList.remove('show');
            // Clear the fields when hiding
            document.getElementById('CostSaving').value = '';
            document.getElementById('DollarRate').value = '';
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        const savedLang = localStorage.getItem('selectedLanguage') || 'en';
        changeLanguage(savedLang);

        const kaizenInput = document.getElementById('KaizenNo');
        if (kaizenInput && !kaizenInput.value) {
            kaizenInput.value = generateKaizenNo();
        }

        // Add event listeners for cost saving radio buttons
        document.getElementById('noCostSaving').addEventListener('change', handleCostSavingChange);
        document.getElementById('hasCostSaving').addEventListener('change', handleCostSavingChange);
        
        // Add form validation - only for the Kaizen form
        const kaizenForm = document.getElementById('kaizenForm');
        if (kaizenForm) {
            kaizenForm.addEventListener('submit', validateForm);
        }
    });
    
    function validateForm(event) {
        let isValid = true;
        const errorMessages = [];
        
        // Clear previous error messages
        clearValidationErrors();
        
        // Validate Employee Name
        const employeeName = document.getElementById('EmployeeName').value.trim();
        if (!employeeName) {
            showFieldError('EmployeeName', 'Employee Name is required.');
            isValid = false;
        }
        
        // Validate Employee Number
        const employeeNo = document.getElementById('EmployeeNo').value.trim();
        if (!employeeNo) {
            showFieldError('EmployeeNo', 'Employee Number is required.');
            isValid = false;
        }
        
        // Validate Suggestion Description
        const suggestionDescription = document.getElementById('SuggestionDescription').value.trim();
        if (!suggestionDescription) {
            showFieldError('SuggestionDescription', 'Suggestion Description is required.');
            isValid = false;
        }
        
        // Validate conditional fields for cost saving
        const hasCostSaving = document.getElementById('hasCostSaving').checked;
        if (hasCostSaving) {
            const costSaving = document.getElementById('CostSaving').value.trim();
            if (!costSaving || parseFloat(costSaving) <= 0) {
                showFieldError('CostSaving', 'Cost Saving amount is required when "Has Cost Saving" is selected.');
                isValid = false;
            }
            
            const dollarRate = document.getElementById('DollarRate').value.trim();
            if (!dollarRate || parseFloat(dollarRate) <= 0) {
                showFieldError('DollarRate', 'Dollar Rate is required when "Has Cost Saving" is selected.');
                isValid = false;
            }
        }
        
        if (!isValid) {
            event.preventDefault();
            // Show summary error message
            showSummaryError('Please fill in all required fields before submitting the form.');
        }
        
        return isValid;
    }
    
    function showFieldError(fieldId, message) {
        const field = document.getElementById(fieldId);
        if (field) {
            field.classList.add('is-invalid');
            
            // Create or update error message
            let errorSpan = field.parentNode.querySelector('.field-error-message');
            if (!errorSpan) {
                errorSpan = document.createElement('div');
                errorSpan.className = 'field-error-message text-danger mt-1';
                field.parentNode.appendChild(errorSpan);
            }
            errorSpan.textContent = message;
        }
    }
    
    function clearValidationErrors() {
        // Remove all custom error messages
        document.querySelectorAll('.field-error-message').forEach(el => el.remove());
        document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
        document.querySelectorAll('.summary-error').forEach(el => el.remove());
    }
    
    function showSummaryError(message) {
        // Remove existing summary error
        const existingError = document.querySelector('.summary-error');
        if (existingError) {
            existingError.remove();
        }
        
        // Create summary error message
        const errorDiv = document.createElement('div');
        errorDiv.className = 'alert alert-danger summary-error mt-3';
        errorDiv.textContent = message;
        
        // Insert before the submit button
        const submitButton = document.querySelector('button[type="submit"]');
        if (submitButton) {
            submitButton.parentNode.insertBefore(errorDiv, submitButton);
        }
    }
</script>
